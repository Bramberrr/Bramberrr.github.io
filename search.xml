<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>二狗蛋魔改实录</title>
      <link href="/2022/04/27/JOURNAL/%E4%BA%8C%E7%8B%97%E8%9B%8B%E9%AD%94%E6%94%B9%E5%AE%9E%E5%BD%95/"/>
      <url>/2022/04/27/JOURNAL/%E4%BA%8C%E7%8B%97%E8%9B%8B%E9%AD%94%E6%94%B9%E5%AE%9E%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="二狗蛋魔改实录"><a href="#二狗蛋魔改实录" class="headerlink" title="二狗蛋魔改实录"></a><p align="center">二狗蛋魔改实录</p></h1><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>自己动手组装一把人体工学键盘的想法，实际上是在偶然听见我家小公主抱怨电脑用久了肩膀疼之后产生的。再加上春暖花开，万物复苏，小公主的生日也到了，所以我人生中第一把客制化键盘也就横空出世。其实在于生日礼物的诸多选项上，我属实是纠结了一阵，在一一否决了树莓派zero套件，改装版NumWorks计算器之后，实用主义の我本人终于敲定了目标（虽然在项目没展开多久就被小公主当场抓包），并且浩浩荡荡地开始了量身打造键盘+魔改的道路。</p><h3 id="材料准备"><a href="#材料准备" class="headerlink" title="材料准备"></a>材料准备</h3><h4 id="PCB板子"><a href="#PCB板子" class="headerlink" title="PCB板子"></a>PCB板子</h4><p>我选定键盘雏形是开源项目ergodone，它相较于原版<a href="https://www.ergodox.io/">ergodox</a>，最主要的特点是：</p><ul><li>主控由Teensy 2.0改为Pro Micro，这样我可以很方便地用Arduino IDE进行编程</li><li>IO扩展芯片由MCP23018改为MCP23017，好像就是省了点成本</li><li>为了方便部分用户作为单手键盘来使用，主手由原来的右手改为了左手，左手可单独使用</li><li>LED灯由轴灯改到左手的右上角竖排放置，更加的直观</li></ul><p>在某宝上有一家ergodone官方授权的店，但是套件已经停售了，于是我顺藤摸瓜进了K.T.E.C.的QQ群，在热心群友的帮助下，找到了店主放在github上的<a href="https://github.com/ktec-hq/ErgoDone.git">源码</a>，把其中的gerber文件夹打包成zip之后直接去嘉立创下单了~（后经小公主提醒，嘉立创将绿色阻焊层改成蓝色要加50块钱工艺费，呜呜呜我的小钱钱啊——）</p><p>板子打好之后：</p><p><img src="/2022/04/27/JOURNAL/%E4%BA%8C%E7%8B%97%E8%9B%8B%E9%AD%94%E6%94%B9%E5%AE%9E%E5%BD%95/image-20220328160504301.png" alt="image-20220328160504301"></p><p><img src="/2022/04/27/JOURNAL/%E4%BA%8C%E7%8B%97%E8%9B%8B%E9%AD%94%E6%94%B9%E5%AE%9E%E5%BD%95/image-20220328160520999.png" alt="image-20220328160520999"></p><h4 id="3D打印外壳"><a href="#3D打印外壳" class="headerlink" title="3D打印外壳"></a>3D打印外壳</h4><p>在github上找到了其他人用的PCB图纸之后，我在Solidworks里画出了外壳的毛坯，并给两个键盘都配了<strong>腕托</strong>，看起来还是很不错的：</p><p><img src="/2022/04/27/JOURNAL/%E4%BA%8C%E7%8B%97%E8%9B%8B%E9%AD%94%E6%94%B9%E5%AE%9E%E5%BD%95/image-20220328145736511.png" alt="image-20220328145736511"></p><p>毛坯状态的外壳图形实在是不好看，鉴于我们的3D打印机只有灰色和红色两种PLA耗材以及一卷TPU软耗材，我决定给零件分别加上一些材料和外观：</p><p><img src="/2022/04/27/JOURNAL/%E4%BA%8C%E7%8B%97%E8%9B%8B%E9%AD%94%E6%94%B9%E5%AE%9E%E5%BD%95/Untitled.png" alt="Untitled"></p><p>肉麻的话也刻好了，透气的腕托也雕刻好了，这个键盘看起来有那么一点点高级了。</p><h4 id="零件采购"><a href="#零件采购" class="headerlink" title="零件采购"></a>零件采购</h4><p>这把键盘的用户需求设计如下：</p><ul><li>兼具蓝牙键盘和有线键盘两种模式</li><li>既可以用自带的锂电池，也可以连电脑供电</li><li>自定义键盘布局和宏键值</li><li>主要是打字舒服</li></ul><p>于是采购零件如下：</p><ol><li>1n4148二极管 *76</li><li>cheery茶轴 *76</li><li>键帽 *76: 4个2U的, 12个1.5U的, 60个1U的</li><li>PCB卫星轴2U *4</li><li>Arduino Pro Micro micro头*1</li><li>MCP23017 *1</li><li>2.2KΩ 电阻 *2</li><li>220Ω 电阻 *3</li><li>蓝白LED *3</li><li>0.1uF陶瓷电容 *1</li><li>Type-C 锂电池充电保护模块 *1</li><li>三挡拨动开关 *1</li><li>5000mAh 锂电池 *1</li><li>USB mini B 连接器 54819-0519 *1</li><li>micro加长头 *1</li><li>3.5 毫米 TRRS 插座 SJ-43514*2</li><li>爱图仕TRRS转TRRS线 *1</li><li>HX-03 蓝牙模块 *1</li><li>M2双通铜柱19MM *14</li><li>M2螺丝8MM *28</li></ol><h3 id="电路设计"><a href="#电路设计" class="headerlink" title="电路设计"></a>电路设计</h3><p>二狗蛋本身已经设计好了键盘电路，用KiCad查看一下gerber，导出为pcb，最后得到一份原理图，可以看出属于矩阵键盘的工作模式：</p><p><img src="/2022/04/27/JOURNAL/%E4%BA%8C%E7%8B%97%E8%9B%8B%E9%AD%94%E6%94%B9%E5%AE%9E%E5%BD%95/image-20220328190819077.png" alt="image-20220328190819077"></p><h4 id="焊接元件"><a href="#焊接元件" class="headerlink" title="焊接元件"></a>焊接元件</h4><p>拿到所有材料之后，第一步是把Pro Micro焊接到左手板上，焊上电阻，二极管，USB miniB连接器，micro加长头，3.5mmTRRS插座，以及LED。右手板焊上MCP23017，电阻，二极管和LED，测试左右手能否用TRRS线连接起来。</p><h4 id="焊接轴体"><a href="#焊接轴体" class="headerlink" title="焊接轴体"></a>焊接轴体</h4><p>先在pcb上焊上四个卫星轴，接着在pcb上选择四个角落的位置，隔着定位板插上茶轴，焊接并测试通断。焊好轴体后可以安装键帽。</p><h4 id="电池组件"><a href="#电池组件" class="headerlink" title="电池组件"></a>电池组件</h4><p>将电池正负与锂电池充电保护模块连接，输出正极连接三档拨动开关，再连接到pcb上VCC，负极连接GND，用以给蓝牙键盘供电。</p><h4 id="蓝牙模块"><a href="#蓝牙模块" class="headerlink" title="蓝牙模块"></a>蓝牙模块</h4><p>VCC与GND分别连接pcb上正负口，RX，TX可以利用剩下的两个LED的IO口，连接上键盘。</p><h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><p>为了方便使用和后续开发，我把主要代码写成arduino library的形式，起名Ergodone，此外还对github上已有的<a href="https://github.com/NicoHood/HID.git">HID-Projects</a>进行了一点点小的修改，增加了蓝牙键盘的配置和example，符合本键盘的需求。</p><p>接下来进行Ergodone这个库的设计，左手键盘由MicroPro直接控制，设计ArduinoProMicroMatrix.h来读写Digital Pin用以扫描。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs h"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> SPARKFUNPROMICROMATRIX_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> SPARKFUNPROMICROMATRIX_H 1</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;KeyboardMatrix.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;config.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArduinoProMicroMatrix</span> :</span> <span class="hljs-keyword">public</span> KeyboardMatrix &#123;<br><span class="hljs-keyword">public</span>:<br>    ArduinoProMicroMatrix();<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">begin</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">uint8_t</span> <span class="hljs-title">scan</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">uint8_t</span> <span class="hljs-title">getRows</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">uint8_t</span> <span class="hljs-title">getCols</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">isOn</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> row, <span class="hljs-keyword">uint8_t</span> col)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">isGhostInRow</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> row)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">matrix_row_t</span> <span class="hljs-title">getRow</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> row)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">select_row</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> row)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">matrix_row_t</span> <span class="hljs-title">read_cols</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">unselect_rows</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> row)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setLEDs</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> ledStatus)</span></span>;<br><br><span class="hljs-keyword">protected</span>:<br>    <span class="hljs-keyword">uint8_t</span> _matrix[SINGLE_HAND_MATRIX_ROWS];<br>    <span class="hljs-keyword">matrix_row_t</span> matrix_debouncing[SINGLE_HAND_MATRIX_ROWS];<br>    <span class="hljs-keyword">uint8_t</span> debouncing;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>其中begin用于初始化键盘，scan用于实时扫描，getRows返回键盘的行数，getCols返回键盘的列数，ison用于检验某行某列是否被按下，即是否有手指按在它脑袋上（is on？），setLEDs用于设置灯的状态，待开发中。</p><p>在一次扫描中，select_row用于选中某一行，把该行电平拉低，而read_cols用于读取当前被按下键的列数，unselect_row用于取消选择该行。</p><p>相应的，右手键盘由串口连着的Mcp23017 IO拓展芯片来控制，设计Mcp23017Matrix.h来控制。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs h"><span class="hljs-meta">#<span class="hljs-meta-keyword">ifndef</span> KEYBOARDMATRIX_H</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> KEYBOARDMATRIX_H 1</span><br><br><span class="hljs-comment">//#include &quot;KeyboardFirmware.h&quot;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;stdint.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Arduino.h&quot;</span></span><br><br><span class="hljs-comment">/* translates Fn keycode to action */</span><br><span class="hljs-comment">//action_t keymap_fn_to_action(uint8_t keycode);</span><br><br><span class="hljs-comment">// #if (MATRIX_COLS &lt;= 8)</span><br><span class="hljs-comment">// typedef uint8_t matrix_row_t;</span><br><span class="hljs-comment">// #elif (MATRIX_COLS &lt;= 16)</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">uint16_t</span> <span class="hljs-keyword">matrix_row_t</span>;<br><span class="hljs-comment">// #elif (MATRIX_COLS &lt;= 32)</span><br><span class="hljs-comment">// typedef uint32_t matrix_row_t;</span><br><span class="hljs-comment">// #else</span><br><span class="hljs-comment">// #error &quot;MATRIX_COLS: invalid value&quot;</span><br><span class="hljs-comment">// #endif</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyboardMatrix</span> &#123;</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">void</span> <span class="hljs-title">begin</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">uint8_t</span> <span class="hljs-title">scan</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">uint8_t</span> <span class="hljs-title">getRows</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">uint8_t</span> <span class="hljs-title">getCols</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">isOn</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> row, <span class="hljs-keyword">uint8_t</span> col)</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">bool</span> <span class="hljs-title">isGhostInRow</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> row)</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">matrix_row_t</span> <span class="hljs-title">getRow</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> row)</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p>以上只是读取被按下键的位置，为了将键值传给电脑，除了键盘映射所用KeyboardMap.h以外，可以利用HID-Projects模拟键盘输入，只需要调用Keyboard这个类就行。</p><h4 id="修改HID-Projects"><a href="#修改HID-Projects" class="headerlink" title="修改HID-Projects"></a>修改HID-Projects</h4><p>主要是在MultiReport中加入BluetoothKeyborad系列，同样继承了DefaultKeyboardAPI父类，这个新子类可以在初始化的时候设置软串口，实际使用中发送键值编码。</p><figure class="highlight h"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs h"><span class="hljs-meta">#<span class="hljs-meta-keyword">pragma</span> once</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;Arduino.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;HID.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;HID-Settings.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;../HID-APIs/DefaultKeyboardAPI.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;SoftwareSerial.h&gt;</span></span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BluetoothKeyboard_</span> :</span> <span class="hljs-keyword">public</span> DefaultKeyboardAPI<br>&#123;<br><span class="hljs-keyword">public</span>:<br>    BluetoothKeyboard_(<span class="hljs-keyword">uint8_t</span> receivePin, <span class="hljs-keyword">uint8_t</span> transmitPin, <span class="hljs-keyword">long</span> speed);<br><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">send</span><span class="hljs-params">(<span class="hljs-keyword">void</span>)</span> <span class="hljs-keyword">final</span></span>;<br><span class="hljs-keyword">private</span>:<br>    SoftwareSerial* bluetoothHost;<br>&#125;;<br><span class="hljs-comment">// extern BluetoothKeyboard_ BluetoothKeyboard;</span><br><br></code></pre></td></tr></table></figure><h4 id="测试蓝牙"><a href="#测试蓝牙" class="headerlink" title="测试蓝牙"></a>测试蓝牙</h4><p>因为RX TX已被占用，为了打造蓝牙键盘，用软串口的RX TX连接到蓝牙模块HX-03，测试串口连接是否成功：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;SoftwareSerial.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;config.h&quot;</span></span><br><br><span class="hljs-function">SoftwareSerial <span class="hljs-title">EEBlue</span><span class="hljs-params">(<span class="hljs-number">10</span>,<span class="hljs-number">14</span>)</span></span>;<span class="hljs-comment">//RX | TX</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Serial.begin(<span class="hljs-number">9600</span>);<br>EEBlue.begin(BAUD_RATE);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(EEBlue.available())<br>        Serial.write(EEBlue.read());<br>    <span class="hljs-keyword">if</span>(Serial.available())<br>        EEBlue.write(Serial.read ());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试左手"><a href="#测试左手" class="headerlink" title="测试左手"></a>测试左手</h4><p>在example中用left_hand_test来测试左手键盘的通断，如果有键值无法读取，则重新焊一下。测试程序将以16进制的形式打印出现变动的那一行键值被按下的情况，通常包含一次按下一次弹起。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;config.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ArduinoProMicroMatrix.h&quot;</span></span><br><br>ArduinoProMicroMatrix matrix;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">matrix_row_t</span> matrix_prev[MATRIX_ROWS];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    matrix.begin();<br>    <span class="hljs-keyword">if</span> (debug_enable) &#123;<br>        Serial.begin(<span class="hljs-number">115200</span>);<br>        <span class="hljs-keyword">while</span> (!Serial)<br>            ;<br>    &#125;<br>    Serial.println(<span class="hljs-string">&quot;left hand serial open\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MATRIX_ROWS; i++) &#123;<br>        matrix_prev[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">matrix_row_t</span> matrix_row = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">matrix_row_t</span> matrix_change = <span class="hljs-number">0</span>;<br><br>    matrix.scan();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint8_t</span> r = <span class="hljs-number">0</span>; r &lt; MATRIX_ROWS; r++) &#123;<br>        matrix_row = matrix.getRow(r);<br>        matrix_change = matrix_row ^ matrix_prev[r];<br>        <span class="hljs-keyword">if</span> (matrix_change) &#123;<br>            matrix_prev[r] = matrix_row;<br>            Serial.println( matrix_row, HEX);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试右手"><a href="#测试右手" class="headerlink" title="测试右手"></a>测试右手</h4><p>同上</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;config.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Mcp23017Matrix.h&quot;</span></span><br><br>Mcp23017Matrix matrix;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">matrix_row_t</span> matrix_prev[MATRIX_ROWS];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    matrix.begin();<br>    <span class="hljs-keyword">if</span> (debug_enable) &#123;<br>        Serial.begin(<span class="hljs-number">9600</span>);<br>        <span class="hljs-keyword">while</span> (!Serial)<br>            ;<br>    &#125;<br>    Serial.println(<span class="hljs-string">&quot;right hand serial open\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; MATRIX_ROWS; i++) &#123;<br>        matrix_prev[i] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">matrix_row_t</span> matrix_row = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">matrix_row_t</span> matrix_change = <span class="hljs-number">0</span>;<br><br>    matrix.scan();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint8_t</span> r = <span class="hljs-number">0</span>; r &lt; MATRIX_ROWS; r++) &#123;<br>        matrix_row = matrix.getRow(r);<br>        matrix_change = matrix_row ^ matrix_prev[r];<br>        <span class="hljs-keyword">if</span> (matrix_change) &#123;<br>            matrix_prev[r] = matrix_row;<br>            Serial.println( matrix_row, HEX);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="测试USB-BLE键盘"><a href="#测试USB-BLE键盘" class="headerlink" title="测试USB_BLE键盘"></a>测试USB_BLE键盘</h4><p>将键盘连接到电脑之后，合并两块键盘，并设计相应的规则来处理多键值同时按下的情况：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;ArduinoProMicroMatrix.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;Mcp23017Matrix.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&quot;KeyboardMap.h&quot;</span></span><br><br>ArduinoProMicroMatrix l_matrix;<br>Mcp23017Matrix r_matrix;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">matrix_row_t</span> matrix_prev[MATRIX_ROWS];<br><span class="hljs-keyword">matrix_row_t</span> matrix_deficit[MATRIX_ROWS];<br><span class="hljs-keyword">uint8_t</span> last_r = <span class="hljs-number">0</span>,last_c_row = <span class="hljs-number">0</span>, last_c_change = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> caps_pin = LED_PIN;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">bool</span> isCap = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">uint8_t</span> layer = <span class="hljs-number">0</span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined(BLE_KEYBOARD)</span><br><span class="hljs-function">BluetoothKeyboard_ <span class="hljs-title">BLEKeyboard</span><span class="hljs-params">(RX_PIN, TX_PIN, <span class="hljs-number">9600</span>)</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    pinMode(caps_pin, OUTPUT);<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined(USB_KEYBOARD)</span><br>        Keyboard.begin();<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br><br>    l_matrix.begin();<br>    r_matrix.begin();<br>    <span class="hljs-keyword">if</span> (debug_enable) &#123;<br>        Serial.begin(<span class="hljs-number">115200</span>);<br>        <span class="hljs-keyword">while</span> (!Serial)<br>            ;<br>    &#125;<br><br>    Serial.println(<span class="hljs-string">&quot;keyboard open\n&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint8_t</span> r = <span class="hljs-number">0</span>; r &lt; MATRIX_ROWS; r++)<br>    &#123;<br>        matrix_deficit[r] = <span class="hljs-number">0</span>;<br>    &#125;<br>    keyboardScan();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint8_t</span> r = <span class="hljs-number">0</span>; r &lt; MATRIX_ROWS; r++)<br>    &#123;<br>        matrix_deficit[r] = matrix_prev[r];<br>        matrix_prev[r] = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    keyboardScan();<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">keyboardScan</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">matrix_row_t</span> l_matrix_row = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">matrix_row_t</span> r_matrix_row = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">matrix_row_t</span> matrix_row = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">matrix_row_t</span> matrix_change = <span class="hljs-number">0</span>;<br>    <br>    l_matrix.scan();<br>    r_matrix.scan();<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">uint8_t</span> r = <span class="hljs-number">0</span>; r &lt; MATRIX_ROWS; r++) &#123;<br>        l_matrix_row = l_matrix.getRow(r);<br>        r_matrix_row = r_matrix.getRow(r);<br>        matrix_row = (l_matrix_row &lt;&lt; <span class="hljs-number">8</span>) + r_matrix_row - matrix_deficit[r];<br>        matrix_change = matrix_row ^ matrix_prev[r];<br>        <span class="hljs-keyword">if</span> (matrix_change) &#123;<br>            matrix_prev[r] = matrix_row;<br>            Serial.println(matrix_change);<br>            <span class="hljs-keyword">uint8_t</span> c_row = getCol(matrix_row);<br>            <span class="hljs-keyword">uint8_t</span> c_change = getCol(matrix_change);<br>            <br>            <span class="hljs-keyword">if</span>(c_change == c_row)<br>                Press(r,c_change);<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>                <span class="hljs-keyword">if</span>(c_row == <span class="hljs-number">14</span>)<br>                    Release(r,c_change);<br>                <span class="hljs-keyword">else</span><br>                <br>                &#123;<br>                    <span class="hljs-keyword">if</span>(c_row == <span class="hljs-number">15</span>)<br>                        Press(r,c_change);<br>                    <span class="hljs-keyword">else</span><br>                    &#123;<br>                        <span class="hljs-keyword">if</span>(last_r == r &amp;&amp; last_c_change == c_change)<br>                            Release(r,c_change);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(r == <span class="hljs-number">2</span> &amp;&amp; c_row == <span class="hljs-number">0</span>)<br>                CapLED();<br>            <br>            last_r = r;<br>            last_c_row = c_row;<br>            last_c_change = c_change; <br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CapLED</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    isCap = !isCap;<br>    <span class="hljs-keyword">if</span>(isCap)<br>        digitalWrite(caps_pin,HIGH);<br>    <span class="hljs-keyword">else</span><br>        digitalWrite(caps_pin,LOW);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">uint8_t</span> <span class="hljs-title">getCol</span><span class="hljs-params">(<span class="hljs-keyword">matrix_row_t</span> matrix)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">switch</span>(matrix)<br>    &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x100</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x200</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x400</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x800</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x1000</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x2000</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x4000</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x80</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">7</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">9</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x08</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x04</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">11</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x02</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">12</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x01</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">13</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x00</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">14</span>;<br>        <span class="hljs-keyword">default</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">15</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Press</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> row, <span class="hljs-keyword">uint8_t</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined(USB_KEYBOARD)</span><br>        Keyboard.press(KeyMap[layer][row][col]);<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> defined(BLE_KEYBOARD)</span><br>        BLEKeyboard.press(KeyMap[layer][row][col]);<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>        <span class="hljs-meta">#<span class="hljs-meta-keyword">error</span> Keyboard not yet supported.</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Release</span><span class="hljs-params">(<span class="hljs-keyword">uint8_t</span> row, <span class="hljs-keyword">uint8_t</span> col)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined(USB_KEYBOARD)</span><br>        Keyboard.release(KeyMap[layer][row][col]);<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">elif</span> defined(BLE_KEYBOARD)</span><br>        BLEKeyboard.release(KeyMap[layer][row][col]);<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span><br>        <span class="hljs-meta">#<span class="hljs-meta-keyword">error</span> Keyboard not yet supported.</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>用define的方式来切换USB和BLE模式，改变模式要重新刷写一遍，本来是要用开关控制的，奈何IO口不够了，只能用这种麻烦的方法，希望将来可以改进。</p><p>最后放上<a href="git@github.com:Bramberrr/BLE-Ergodone.git">Ergodone</a>的地址。</p>]]></content>
      
      
      <categories>
          
          <category> JOURNAL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Happy St. Valentine&#39;s Day</title>
      <link href="/2022/02/14/JOURNAL/Happy_SVD/"/>
      <url>/2022/02/14/JOURNAL/Happy_SVD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Happy-St-Valentine’s-Day"><a href="#Happy-St-Valentine’s-Day" class="headerlink" title="Happy St. Valentine’s Day"></a><p align="center">Happy St. Valentine’s Day</p></h1><iframe width="800" height="450" src="//player.bilibili.com/player.html?aid=602516199&bvid=BV1sB4y1G724&cid=820793708&page=1" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>]]></content>
      
      
      <categories>
          
          <category> JOURNAL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> love </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Applied Nonlinear Control</title>
      <link href="/2021/09/21/NOTE/Applied_Nonlinear_Control/"/>
      <url>/2021/09/21/NOTE/Applied_Nonlinear_Control/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Applied-Nonlinear-Control"><a href="#Applied-Nonlinear-Control" class="headerlink" title="Applied Nonlinear Control"></a><p align="center">Applied Nonlinear Control</p></h1><h2 id="1-Introduction-to-nonlinear-control"><a href="#1-Introduction-to-nonlinear-control" class="headerlink" title="1 Introduction to nonlinear control"></a>1 Introduction to nonlinear control</h2><h3 id="0-Review-on-linear-control"><a href="#0-Review-on-linear-control" class="headerlink" title="0 Review on linear control"></a>0 Review on linear control</h3><p>Linear system: the input and output of a system satisfy the superposition principle<br>$$<br>x_1(t)\to y_1(t);x_2(t)\to y_2(t)<br>$$</p><p>$$<br>a_1x_1(t)+a_2x_2(t)\to a_1y_1(t)+a_2y_2(t)<br>$$</p><p>Linear systems and control is a mature subject with many powerful methods, applicable in many engineering problems. </p><p><strong>e.g.</strong> Voltage and current in circuits</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/Voltage.png" alt="Voltage and current in circuits"></p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/Voltage2.png" alt="Voltage and current in circuits2"></p><p>In some circumstances, a nonlinear system can be approximated by a linear system</p><p><strong>e.g.</strong> harmonic motion</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/harmonic.png" alt="harmonic motion"></p><h4 id="How-linear-system-theories-apply-to-nonlinear-physical-systems"><a href="#How-linear-system-theories-apply-to-nonlinear-physical-systems" class="headerlink" title="How linear system theories apply to nonlinear physical systems?"></a>How linear system theories apply to nonlinear physical systems?</h4><p>Under the premise of <em><strong>equilibrium</strong></em>,  where the physical system is only slightly perturbed from some “neutral” state, the operating range of a controlled system is small and the nonlinearities are <em><strong>smooth</strong></em>, then the system’s dynamics can be reasonably approximated by a linear system - concept of <em><strong>linearization</strong></em>.</p><h4 id="When-linearization-fails"><a href="#When-linearization-fails" class="headerlink" title="When linearization fails?"></a>When linearization fails?</h4><ul><li>When the system undergo large amplitude motions;</li><li>Hard nonlinearities are present.</li></ul><h3 id="1-1-Why-Nonlinear-Control"><a href="#1-1-Why-Nonlinear-Control" class="headerlink" title="1.1 Why Nonlinear Control ?"></a>1.1 Why Nonlinear Control ?</h3><h4 id="a-Improvement-of-existing-control-systems"><a href="#a-Improvement-of-existing-control-systems" class="headerlink" title="a. Improvement of existing control systems"></a>a. Improvement of existing control systems</h4><ul><li><p>The existing control systems, which mean linear controllers, perform only well and stably under small range operations;</p></li><li><p>When it comes to large amplitude motions, the nonlinear controllers will handle the system directly and thus, stably.</p></li></ul><p><strong>e.g.</strong> a swinging pendulum</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/pendulum.png" alt="pendulum"></p><p>Ignoring the friction, it can be linearized around $\theta=0$, for $\lim_{x \to 0}sin x=x$<br>$$<br>ml\ddot \theta=-mgsin \theta \approx-mg\theta<br>\\ \frac {d^2 \theta} {d t^2}+\frac g l \theta=0<br>$$<br>However, when θ is relatively large, the linearization won’t work, so a nonlinear controller will be needed.</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/pendulum2.png" alt="pendulum2"></p><h4 id="b-Analysis-of-hard-nonlinearities"><a href="#b-Analysis-of-hard-nonlinearities" class="headerlink" title="b. Analysis of hard nonlinearities"></a>b. Analysis of hard nonlinearities</h4><ul><li>When hard nonlinearities are present;</li><li>The nonlinearities may cause undesirable behavior like instabilities or spurious limit cycles, which must be predicted and properly compensated for. </li></ul><p><strong>e.g.</strong> </p><p><strong>Friction</strong> </p><p>Coulomb+viscous friction<br>$$<br>F_f=-\mu N sgn(v)-\rho v<br>$$<br><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/friction.png" alt="friction"></p><p><strong>Saturation</strong></p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/saturation.png" alt="saturation"></p><p><strong>Hysteresis</strong></p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/hysteresis.png" alt="hysteresis"></p><h4 id="c-Dealing-with-model-uncertainties"><a href="#c-Dealing-with-model-uncertainties" class="headerlink" title="c. Dealing with model uncertainties"></a>c. Dealing with model uncertainties</h4><ul><li>Linear controllers require accurate parameters, which are uncertain in many control problems;</li><li>Uncertainties are tolerated to nonlinearities for they can be part of control systems.</li></ul><p><strong>e.g.</strong>  satellite antenna</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/satelliteantenna.png" alt="satellite antenna"></p><h4 id="d-Design-Simplicity"><a href="#d-Design-Simplicity" class="headerlink" title="d. Design Simplicity"></a>d. Design Simplicity</h4><ul><li>We always assume linear control designs are naturally simpler than nonlinear ones. However, the latter may be simpler because they are rooted in the physics theory.</li></ul><p><strong>e.g.</strong> swinging pendulum</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/dangle.gif" alt="dangle"></p><ul><li><p>When linearizing the system<br>$$<br>\frac {d^2 \theta} {dt^2}+\frac g l sin \theta=0<br>$$</p><p>$$<br>\lim_{x \to 0}sin x=x<br>$$</p><p>$$<br>\frac {d^2 \theta} {dt^2}+\frac g l\theta=0<br>$$</p><p>$$<br>\theta = A cos(\sqrt{\frac g l}t+\phi)<br>$$</p></li><li><p>In physics fact</p><p>The pendulum comes to rest at a position of minimal energy.</p></li></ul><h4 id="e-Other-reasons"><a href="#e-Other-reasons" class="headerlink" title="e. Other reasons"></a>e. Other reasons</h4><ul><li>Cost less and perform better</li></ul><p><strong>e.g.</strong>  bang-bang controllers</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/switch.png" alt="switch"></p><p>A kind of time-optimal control problems</p><ul><li>Interrelationship with technology: advances in computer tech help to design and analyze nonlinear controllers, while modern technology requires more application of nonlinear control to improve performance.</li></ul><h3 id="1-2-Nonlinear-System-Behavior"><a href="#1-2-Nonlinear-System-Behavior" class="headerlink" title="1.2 Nonlinear System Behavior"></a>1.2 Nonlinear System Behavior</h3><p>Physical systems are inherently nonlinear. When the operating range is small, the system can be linearized, e.g. swinging pendulum when the angle is small.</p><h4 id="Part-I-Some-common-nonlinearities"><a href="#Part-I-Some-common-nonlinearities" class="headerlink" title="Part I : Some  common nonlinearities"></a>Part I : Some  common nonlinearities</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph LR<br>    id1(Nonlinearities)--&gt;id2(inherent)<br>    id1(Nonlinearities)--&gt;id3(intentional)<br>    id2---id4(those come with the system&#x27;s hardware and motion.&lt;br/&gt;e.g. centripetal forcesand Coulomb friction.)<br>    id3---id5(those  are artificially introduced by the designer.&lt;br/&gt;e.g. adaptive control laws and bang-bang optimal control laws.)<br>    style id1 fill:#fff,stroke:#000,stroke-width:0.5px;<br>    style id2 fill:#fff,stroke:#000,stroke-width:0.5px;<br>    style id3 fill:#fff,stroke:#000,stroke-width:0.5px;<br>    style id4 fill:#fff,stroke:#000,stroke-width:0px;<br>    style id5 fill:#fff,stroke:#000,stroke-width:0px;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph LR<br>    id1(Nonlinearities)--&gt;id2(continuous)<br>    id1(Nonlinearities)--&gt;id3(discontinuous)<br>    id3---id5( hard nonlinearities &lt;br/&gt;e.g. backlash, hysteresis, and stiction.)<br>    style id1 fill:#fff,stroke:#000,stroke-width:0.5px;<br>    style id2 fill:#fff,stroke:#000,stroke-width:0.5px;<br>    style id3 fill:#fff,stroke:#000,stroke-width:0.5px;<br>    style id5 fill:#fff,stroke:#000,stroke-width:0px;<br></code></pre></td></tr></table></figure><h4 id="Part-II-Recall-linear-system-characteristics"><a href="#Part-II-Recall-linear-system-characteristics" class="headerlink" title="Part II : Recall linear system characteristics"></a>Part II : Recall linear system characteristics</h4><p>Consider the general autonomous linear time-invariant system:<br>$$<br>\dot x=Ax,y=Cx<br>$$<br>There are some key characteristics of LTI systems:</p><ul><li><p>A solution always exists and is unique if $det(A) \neq 0$<br>$$<br>\dot x=Ax;equilibrium \Leftrightarrow \dot x = 0 \Leftrightarrow x=x^*=0<br>$$<br>Hence for linear systems we do not make the distinction between the <em>origin</em> and the</p><p><em>equilibrium</em>.</p></li><li><p>Stability is determined by $eig(A)$,  if all eigenvalues of $A$ have negative real parts, the equilibrium point is stable;</p></li><li><p>The solution depends continuously on the initial condition, since<br>$$<br>x(x_0,t)=e^{At}.x_0<br>$$</p></li><li><p>Continuity: for each time $t$, $x(x_0,t) $is a smooth (in fact, linear) mapping of the initial condition；</p></li><li><p>If there exists a periodic solution, then all solutions are periodic；</p><p><strong>e.g.</strong> Harmonic oscillator $\ddot y +y=0$</p><p>By choosing the <em>state variables</em> $x_1=y$ and $x_2=\dot y$:<br>$$<br>\dot x_1=x_2,\dot x_2=-x_1<br>$$<br>Dividing the two equations:<br>$$<br>\frac {dx_1}{dx_2}=-\frac {x_2} {x_1}\Leftrightarrow x_1dx_1+x_2dx_2=0<br>$$</p><p>$$<br>\Leftrightarrow \int x_1dx_1+\int x_2dx_2=0 \Leftrightarrow \frac 1 2(x_1^2+x_2^2)=\frac {R^2} 2<br>$$</p><p>Hence, the trajectories are all circles of radius <em>R</em>, they are all periodic.</p></li><li><p>Superposition of solutions:</p><p>consider<br>$$<br>\dot x=Ax+Bu,y=Cx<br>$$<br>with $x(0) = 0$. Then, the respective solutions for two input functions $u_1(t)$ and $u_2(t)$</p><p>are given by<br>$$<br>y_1(t)=C \int_0^t e^{A(t-\tau)}Bu_1(\tau)d\tau<br>$$</p><p>$$<br>y_2(t)=C \int_0^t e^{A(t-\tau)}Bu_2(\tau)d\tau<br>$$</p><p>the sum of which is evidently the solution of the sum of the inputs:<br>$$<br>y_1(t)+y_2(t)=C \int_0^t e^{A(t-\tau)}B(u_1(\tau)+u_2(\tau))d\tau<br>$$<br>hence, the asymptotic stability of the system implies bounded-input bounded-output stability in the presence of u.</p></li><li><p>Principle of harmonic response: given a sinusoidal input, the output of a stable linear system at steady-state is also sinusoidal of the same frequency as the input, and with a phase change and different amplitude.</p></li></ul><h4 id="Part-3-Some-common-nonlinear-system-behaviors"><a href="#Part-3-Some-common-nonlinear-system-behaviors" class="headerlink" title="Part 3: Some common nonlinear system behaviors"></a>Part 3: Some common nonlinear system behaviors</h4><h5 id="a-No-superposition"><a href="#a-No-superposition" class="headerlink" title="a. No superposition"></a>a. No superposition</h5><p><strong>e.g.</strong> A simplified model of the motion of an underwater vehicle</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/underwatervehicle.png" alt="underwater vehicle"><br>$$<br>\dot v+|v|v=u<br>$$</p><p>$$<br>\dot v_1+|v_1|v_1=u_1,\dot v_2+|v_2|v_2=u_2<br>$$</p><p>The sum is $\dot v_1 +\dot v_2+|v_1|v_1+|v_2|v_2=u_1+u_2$, not $\dot v_{1+2}+|v_{1+2}|v_{1+2}=u_1+u_2$.</p><h5 id="b-A-solution-may-not-exist-globally"><a href="#b-A-solution-may-not-exist-globally" class="headerlink" title="b. A solution may not exist globally"></a>b. A solution may not exist globally</h5><p><strong>e.g.</strong><br>$$<br>\dot x= 1+x^2\Leftrightarrow \int_0^t \frac {dx}{1+x^2}=\int_0^tdt+c \Leftrightarrow x=tan(t+c)<br>$$<br><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/global.png" alt="global"></p><h5 id="c-Solutions-may-not-be-unique"><a href="#c-Solutions-may-not-be-unique" class="headerlink" title="c. Solutions may not be unique"></a>c. Solutions may not be unique</h5><p><strong>e.g.</strong> $\dot x=3x^{\frac 2 3},x(0)=0$</p><p>Two possible solutions: $x\equiv 0$ and  $x(t)=t^3$</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/unique.png" alt="unique"></p><h5 id="d-A-nonlinear-system-can-have-multiple-equilibrium-points"><a href="#d-A-nonlinear-system-can-have-multiple-equilibrium-points" class="headerlink" title="d. A nonlinear system can have multiple equilibrium points"></a>d. A nonlinear system can have multiple equilibrium points</h5><p><strong>e.g.</strong>  A first-order system<br>$$<br>\dot x =-x+x^2,x(0)=x_0<br>$$<br>Its linearization is<br>$$<br>\dot x=-x<br>$$<br>The solution of this linear equation is $x(t)=x_0e^{-t}$.</p><p>A nonlinear system<br>$$<br>\frac {dx}{-x+x^2}=dt<br>$$<br>The solution of this nonlinear equation is $x(t)=\frac {x_0e^{-t}}{1-x_0+x_0e^{-t}}$, the system has two equilibrium points, $x=0$ and $x=1$.</p><p><strong>e.g.</strong> The pendulum of unit length</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/points.png" alt="points"><br>$$<br>\ddot \theta=-gsin\theta,\theta \in[-\pi,\pi]<br>$$<br>Letting $x_1=θ$ and $ x_2 = \dotθ$,<br>$$<br>\dot x_1=x_2,\dot x_2=-gsinx_1<br>$$<br>The equilibrium points are  $\dot x_1 = \dot x_2 = 0$<br>$$<br>x_2^*=0~ and~sinx_1^*=0 \Rightarrow \theta ^*=0, \pm \pi<br>$$</p><h5 id="e-Properties-that-can-only-be-found-among-nonlinear-systems"><a href="#e-Properties-that-can-only-be-found-among-nonlinear-systems" class="headerlink" title="e. Properties that can only be found among nonlinear systems"></a>e. Properties that can only be found among nonlinear systems</h5><ul><li><p>Limit cycles</p><p><strong>e.g.</strong> Van der Pol Equation<br>$$<br>m\ddot x +2c(x^2-1)\dot x +kx=0<br>$$<br><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/vanderpol.png" alt="vanderpol"></p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/vanderpol2.png" alt="vanderpol2"></p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/vanderpol3.png" alt="vanderpol3"></p></li><li><p>Bifurcation:  Suppose the dynamics depend on some parameter $\mu$<br>$$<br>\dot x=f(x,\mu)<br>$$<br>Bifurcation occurs when, as $\mu$ varies, the system undergoes “structural” change.</p><p><strong>e.g.</strong> Undamped Duffing equation  (cubic spring)<br>$$<br>\ddot x+ax+x^3=0, with \alpha &gt;0<br>$$<br>Equilibrium points are given by<br>$$<br>\ddot x=\dot x=0 \Leftrightarrow x(\alpha+x^2)=0<br>$$<br>One distinguishes two cases following the value of $\alpha$:<br>$$<br>\alpha \geq0 \Rightarrow eq.~at ~ x^*=0<br>$$</p><p>$$<br>\alpha &lt; 0 \Rightarrow three ~eq. ~pts.: ~ x^*=0,x^*=\pm \sqrt{|\alpha|}<br>$$</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/bifurcation.png" alt="bifurcation"></p><p>Hence,  two additional equilibrium points appear as $\alpha$ passes zero.</p></li><li><p>Chaos:  discontinuous dependency on the initial conditions, i.e. small changes in the initial conditions can bring about drastically different solutions or trajectories.</p><p><strong>e.g.</strong><br>$$<br>y=a_1x-0.2x^2,x=x_0+y<br>$$<br><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/chaos.png" alt="chaos"></p></li></ul><h2 id="2-Lyapunov-Theory"><a href="#2-Lyapunov-Theory" class="headerlink" title="2 Lyapunov Theory"></a>2 Lyapunov Theory</h2><h3 id="Equilibrium-Point-and-Stability"><a href="#Equilibrium-Point-and-Stability" class="headerlink" title="Equilibrium Point and Stability"></a>Equilibrium Point and Stability</h3><p><strong>Autonomous Systems</strong>: A system whose dynamical equation is independent of time.</p><p> Consider the autonomous system:<br>$$<br>\dot x= f(x), x \in R^n,~f:R^n\rightarrow R^n, f(0)=0<br>$$<br><strong>Equilibrium Points</strong>: if once $x(t)$ is equal to $x^*$, it remains equal to $x^*$ for all future time.<br>$$<br>\dot x =0=f(x^*)<br>$$<br>a. Assumed, without loss of generality, that the origin is an equilibrium of the system. For  the analysis of another equilibrium $x^∗$, if it exists, can be done similarly by a change of variables $v=x-x^*$. Then $\dot v=f(v+x^*):=h(v)$</p><p>b. For an autonomous system,  we shall always take $t_0 = 0$ without loss of generality.</p><p>c. The above can be applied to closed-loop dynamics, <strong>e.g.</strong><br>$$<br>\dot x =f(x,u), u=g(x),<br>$$<br>then closed-loop is autonomous: $\dot x=f(x,g(x)):=h(x)$</p><ul><li>The equilibrium points of LTI system are not isolated, but a nonlinear system can have several isolated equilibrium points.</li></ul><p><strong>Nominal motion</strong>:  an equivalent stability problem around an equilibrium point. Let $x^*(t)$ be the solution to $\dot x= f(x)$ with the initial condition $x^*(0)=x_0$ - concept of <strong>nominal motion trajectory</strong>.</p><h4 id="Stability-Definitions"><a href="#Stability-Definitions" class="headerlink" title="Stability Definitions"></a>Stability Definitions</h4><p>The equilibrium point $x^∗ = 0$ is:</p><p>a. <strong>Lyapunov stable</strong> if<br>$$<br>\forall R&gt;0, \exists r&gt;0:~x(0)\in B_R\Rightarrow x(t)\in B_R, \forall t\geq0<br>$$<br><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/stable.png" alt="stable"></p><p>b. <strong>asymptotically stable</strong> if it is stable, and<br>$$<br>\exists r&gt;0,x(0)\in B_R\Rightarrow x(t)\rightarrow0, t\rightarrow \infty<br>$$<br><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/as.png" alt="asymptotically stable"></p><p>c.  <strong>exponentially stable</strong> if<br>$$<br>\exists r&gt;0,\alpha &gt;0,\lambda&gt;0,x(0)\in B_R \Rightarrow ||x(t)||\leq \alpha||x(0)||e^{-\lambda t}<br>$$<br><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/es.png" alt="exponentially stable"></p><p>d.  <strong>globally asymptotically stable</strong> if<br>$$<br>x(t)\rightarrow0, t\rightarrow \infty,\forall x(0) \in R^n<br>$$<br><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/gas.png" alt="global asymptotically stable"></p><p>e. <strong>globally exponentially stable</strong> if<br>$$<br>\exists \alpha &gt;0,\lambda &gt;0,||x(t)||\leq \alpha||x(0)||e^{-\lambda t},\forall x(0) \in R^n<br>$$</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/ges.png" alt="global exponentially stable"></p><p>f. <strong>Unstable</strong> if<br>$$<br>\exists R&gt;0,\forall r&gt;0, \exists x(0)\in B_R, \exists t \geq 0 :x(t)\notin B_R<br>$$</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/us.png" alt="unstable"></p><h3 id="Linearization-and-Local-Stability"><a href="#Linearization-and-Local-Stability" class="headerlink" title="Linearization and Local Stability"></a>Linearization and Local Stability</h3><p>Given a nonlinear system<br>$$<br>\dot x=f(x), x^*=0,f(0)=0<br>$$<br>Linearized system<br>$$<br>\dot x = Ax+h.o.t., A=(\frac {\delta f}{\delta x})_{x=0}<br>$$</p><p>system with a control input $u$:   </p><p>$$<br>\dot x = Ax+Bu,A=(\frac {\delta f}{\delta x} )_{x=0},B=(\frac {\delta f}{\delta u})_{x=0,u=0}<br>$$</p><p><strong>Judgment for stability</strong>:</p><p>a. If all eigenvalues $λ_i\in λ(A)$ have negative real parts, then $x^∗ = 0$ is asymptotically stable for the nonlinear system;</p><p>b. If at least one eigenvalue has positive real part, then $x^∗ = 0$ is unstable for then nonlinear system;</p><p>c. If at least one eigenvalue has zero real part, then we cannot conclude on the stability of $x^∗ = 0$ for the nonlinear system.</p><p><strong>e.g.</strong> Linearization</p><p>$\dot v+|v|v=0\rightarrow \dot v \approx 0$ is G.A.S. at $x^*=0$</p><p>$\dot v-|v|v=0\rightarrow \dot v \approx 0$ is unstable at $x^*=0$</p><h3 id="Lyapunov-’s-Direct-Method"><a href="#Lyapunov-’s-Direct-Method" class="headerlink" title="Lyapunov ’s Direct Method"></a>Lyapunov ’s Direct Method</h3><h4 id="Mathematical-Preliminaries"><a href="#Mathematical-Preliminaries" class="headerlink" title="Mathematical Preliminaries"></a>Mathematical Preliminaries</h4><p>Consider function $V: R^n \to R$. $V$ is said to be:</p><p>a. <strong>locally positive definite</strong> in $\Omega \subset R^n, 0 \in \Omega$, if</p><ul><li><p>$V(x)&gt;0, \forall x \neq 0<del>in</del>\Omega$</p></li><li><p>$V(0)=0$</p></li></ul><p>We write $V&gt;0$</p><p>b. <strong>locally positive semi-definite</strong> if $V(x)\geq 0 ~ in~\Omega$</p><p>We write $V \geq 0$</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/pd.png" alt="positive definite"></p><p>c. <strong>globally positive definite/ positive semi-definite</strong> if $\Omega=R^n$</p><p>d. <strong>locally/globally negative definite/ positive semi-definite</strong> if $V&lt;0/V\leq 0$</p><p><strong>e.g.</strong> The pendulum’s total (kinetic and potential) energy is positive definite:<br>$$<br>V(\theta,\dot \theta)= \frac 1 2 ml^2\dot \theta ^2+mgl(1-cos \theta)<br>$$</p><h4 id="Lyapunov-function"><a href="#Lyapunov-function" class="headerlink" title="Lyapunov function"></a>Lyapunov function</h4><p>In a ball $B_R$, $V(x)&gt;0, \dot V(x) \leq 0$, then $V(x)$ is said to be a Lyapunov function for the system.</p><h4 id="Equilibrium-Point-Theorems"><a href="#Equilibrium-Point-Theorems" class="headerlink" title="Equilibrium Point Theorems"></a>Equilibrium Point Theorems</h4><h5 id="Local-Stability"><a href="#Local-Stability" class="headerlink" title="Local Stability"></a>Local Stability</h5><p>In a ball $B_R$, let $V(x)$ with continuous first partial derivatives such that</p><ul><li>$V$ is locally positive definite in $B_R$</li><li>$\dot V$ is locally negative semi-definite in $B_R$</li></ul><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/local.png" alt="local"></p><p>Then, the origin $x^*=0$ is stable; if $\dot V$ is locally negative definite in $B_R$, then $x^*=0$ is <em><strong>asymptotically stable</strong></em>.</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/alocal.png" alt="asymptotically local"></p><p><strong>e.g.</strong> The pendulum’s equation:<br>$$<br>\ddot \theta+asin\theta=0<br>$$<br>The total energy function:<br>$$<br>V=\frac 12\dot \theta ^2+a(1-cos\theta)<br>$$</p><p>$$<br>\dot V=\dot \theta \ddot \theta+a \dot \theta sin \theta =0<br>$$</p><p>Hence, the total energy function is a Lyapunov function for the pendulum, and shows that the origin is stable. In fact, the system is conservative.</p><p><strong>e.g.</strong>  The pendulum with damping:<br>$$<br>\ddot \theta+c\dot \theta+asin\theta=0~~~~~~~~~~~(c&gt;0)<br>$$<br>We again use the total energy function as candidate Lyapunov function:<br>$$<br>V_1=\frac 12\dot \theta ^2+a(1-cos\theta)<br>$$</p><p>$$<br>\dot V_1=\dot \theta \ddot \theta+a \dot \theta sin \theta =-c\dot \theta^2\leq    0<br>$$</p><p>Hence, the total energy function $V_1$ only shows the origin is Lyapunov stable.</p><p>consider $V_2$ :<br>$$<br>V_2(\theta,\dot \theta)=\frac 12\dot \theta ^2+\frac 12(\dot \theta +\theta)^2+2a(1-cos\theta)<br>$$<br>which is positive definite on the domain (−π, π) × R.<br>$$<br>\dot V_2=-(\dot \theta ^2+\theta sin\theta)&lt;0<br>$$<br>Hence, the new Lyapunov function $V_2$ establishes that the origin is asymptotically stable( excluded the state $(θ, \dotθ) = (π, \dot θ)$, which is stationary and does not tend to the origin.</p><h5 id="Global-Stability"><a href="#Global-Stability" class="headerlink" title="Global Stability"></a>Global Stability</h5><p>let $V(x)$ with continuous first partial derivatives such that</p><ul><li>$V$ is positive definite</li><li>$\dot V$ is negative definite</li><li>$V$ is radially unbounded, i.e. $V(x)\to \infty, ||x||\to \infty$</li></ul><p>Then, the origin $x^∗ = 0$ is globally asymptotically stable.</p><p>Note: If $V$ is radially unbounded, then<br>$$<br>\forall c&gt;0,<del>\exists R_0:</del>||x||&gt;R_0\Rightarrow V(x)&gt;c<br>$$<br>This can be interpreted as that the function converges uniformly to an infinite value.</p><p><strong>e.g.</strong> The function $V=\frac {x_1^2}{1+x_1^2}+x_2^2(1+x_1^2)$ is positive definite but not radially unbounded, because it  is possible to find a trajectory $x(t)$ such that $\dot V(x(t))&lt; 0$, but $x(t) →(∞, 0)$ while $V → 1$.</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/unbounded.png" alt="unbounded"></p><h4 id="Invariant-Set-Theorem"><a href="#Invariant-Set-Theorem" class="headerlink" title="Invariant Set Theorem"></a>Invariant Set Theorem</h4><p>A generalization of the concept of equilibrium point, including equilibrium points, the domain of attraction of an equilibrium point,  trajectories, limit cycles, etc.</p><p>A set $G$ is an invariant set of $\dot x = f(x)$ if<br>$$<br>x(0)\in G \Rightarrow x(t) \in G, ~ \forall t \geq 0<br>$$<br>In other words, all solution that starts in $G$ stays in $G$.</p><p><strong>e.g.</strong> an equilibrium, a trajectory, a surface, etc.</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/ist.png" alt="IST"></p><p>Note: <strong>Domain of Attraction</strong> is the set of all points, starting from which the system trajectories will tend to the origin, i.e.<br>$$<br>R_A:={x_0 \in R^n:x(x_0,t)\to 0 ~ as ~ t \to \infty}<br>$$</p><p><strong>e.g.</strong> Consider<br>$$<br>\begin{cases}\dot x_1=x_2 \\ \dot x_2=-h_1(x_1)-h_2(x_2)  \end{cases}<br>$$<br>where $h_i(0)=0,h_i(x)&gt;0,\forall x \neq 0 and ||x||&lt;a$</p><p>Choose $x_1=\theta,x_2=\dot \theta$ in the pendulum system:<br>$$<br>ml\ddot \theta =-mgsin \theta-kl\dot \theta<br>$$<br>Choose energy function:<br>$$<br>V(x)=\int_0^{x_1}h_1(y)dy+\frac 1 2x_2^2<br>$$<br>$h_1(x)&gt;0,\forall x \neq 0 and || x||&lt;a \Rightarrow V&gt;0$</p><p>$\dot V=h_1(x_1)x_2+x_2[-h_1(x_1)-h_2(x_2)]=-x_2h_2(x_2) \leq 0$</p><p>$\dot V=0\Rightarrow -x_2h_2(x_2)=0\Rightarrow x_2(t)=0 \Rightarrow \dot x_2(t)=0 \Rightarrow h_1(x_1)=0 \Rightarrow x_1(t)=0$</p><p>Only $x\equiv0$ s.t. $\dot V=0\Rightarrow$ the origin is A.S.</p><h5 id="Local-Invariance-Set-Theorem"><a href="#Local-Invariance-Set-Theorem" class="headerlink" title="Local Invariance Set Theorem"></a>Local Invariance Set Theorem</h5><p>let $V(x)$ with continuous first partial derivatives such that</p><ul><li> for some $l &gt; 0$, $\Omega_l:={x\in R^n:V(x)\leq l}$ is bounded</li><li> $\dot V(x) \leq 0,\forall x \in \Omega_l$</li></ul><p>Let $R(Ω_l)$ be the level set in $Ω_l$, i.e. $R(Ω_l)= {x ∈ Ω_l : \dot V (x) = 0}$ and let $M$ be the largest invariant set in $R$:<br>$$<br>M \subset R(\Omega_l) \subset \Omega_l<br>$$<br>Then, every trajectory originating in $Ω_l$ tends to $M$, i.e.<br>$$<br>x(0)\in \Omega_l \Rightarrow x(t) \to M, t \to \infty<br>$$<br><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/list.png" alt="LIST"></p><p>Remark: $V$ needs not to be positive definite, moreover</p><ul><li>$M$ may include isolated equilibrium, limit cycles and multiple solutions. $M$ may not even be connected.</li><li>Negative point of the theorem: it gives no stability claim.</li><li>$\Omega$ can be more general: a compact invariant set.</li></ul><h5 id="Local-asymptotic-stability-using-the-invariance-set-theorem"><a href="#Local-asymptotic-stability-using-the-invariance-set-theorem" class="headerlink" title="Local asymptotic stability using the invariance set theorem"></a>Local asymptotic stability using the invariance set theorem</h5><p>let $V(x)$ with continuous first partial derivatives such that in a neighborhood $\Omega$ of the origin,</p><ul><li>$V&gt;0$ in $\Omega$</li><li>$\dot V\leq 0$ in $\Omega$</li><li>the set $R$ defined by $\dot V(x) = 0$ contains no system trajectories other than the trivial trajectory $x \equiv 0$</li></ul><p>Then, the origin is asymptotically stable.</p><h5 id="Global-Invariance-Set-Theorem"><a href="#Global-Invariance-Set-Theorem" class="headerlink" title="Global Invariance Set Theorem"></a>Global Invariance Set Theorem</h5><p>let $V(x)$ with continuous first partial derivatives such that</p><ul><li><p>$V(x)\to \infty, ||x|| \to \infty$</p></li><li><p>$\dot V(x) \leq 0, \forall x \in R^n$</p></li><li><p>the set $R$ defined by $\dot V(x) = 0$ and let $M$ be the largest invariant set in $R$. Then, every trajectory tends to $M$, i.e.<br>$$<br>x(t) \to M, t \to \infty,\forall x(0)\in R^n<br>$$</p></li></ul><h5 id="Global-asymptotic-stability-using-the-invariance-set-theorem"><a href="#Global-asymptotic-stability-using-the-invariance-set-theorem" class="headerlink" title="Global asymptotic stability using the invariance set theorem"></a>Global asymptotic stability using the invariance set theorem</h5><p>let $V(x)$ with continuous first partial derivatives such that</p><ul><li>$\dot V\leq 0$</li><li>$V$ is radially unbounded</li><li>the set $R$ defined by $\dot V(x) = 0$ contains no system trajectories other than the trivial trajectory $x \equiv 0$</li></ul><p>Then, the origin is asymptotically stable.</p><p><strong>e.g.</strong> Consider<br>$$<br>\begin{cases}\dot x_1=-x_2-\mu x_1^3 \\ \dot x_2=x_1  \end{cases}<br>$$<br>Choosing $V=\frac 1 2 (x_1^2+x_2^2)&gt;0$ and radially unbounded, we get $\dot V = -\mu x_1^4 \le 0$. $E={x_1=0}$, $\dot x_1=-x_2\ne 0$ except when $x_2=0$,  hence all solution entering $E$ must leave $E$, except $x ≡ 0$. From this we can concluded that the origin is globally asymptotically stable.</p><h5 id="Instability-Theorem"><a href="#Instability-Theorem" class="headerlink" title="Instability Theorem"></a>Instability Theorem</h5><p>let $V(x)$ with continuous first partial derivatives such that in a neighborhood $\Omega$ of the origin,</p><ul><li><p>$V(0)=0$</p></li><li><p>$\forall r&gt;0 ,\exists  x_0 \in B_R:~ V(x_0)&gt;0$</p></li><li><p>$\dot V&gt;0$ in $\Omega$</p></li></ul><p>Then, $x^*=0$ is unstable.</p><h3 id="System-Analysis-Based-on-Lyapunov-‘s-Direct-Method"><a href="#System-Analysis-Based-on-Lyapunov-‘s-Direct-Method" class="headerlink" title="System Analysis Based on Lyapunov ‘s Direct Method"></a>System Analysis Based on Lyapunov ‘s Direct Method</h3><h4 id="Linearization"><a href="#Linearization" class="headerlink" title="Linearization"></a>Linearization</h4><h5 id="symmetric"><a href="#symmetric" class="headerlink" title="symmetric"></a>symmetric</h5><p>A square matrix $M$ is symmetric if $M = M^T$</p><p>Note: Any square matrix $M$ can be represented as the sum of a symmetric matrix and a skew-symmetric matrix.<br>$$<br>M=\frac {M+M^T} 2 + \frac {M-M^T} 2<br>$$</p><h5 id="Selection-of-Lyapunov-Function-of-LTI"><a href="#Selection-of-Lyapunov-Function-of-LTI" class="headerlink" title="Selection of Lyapunov Function of LTI"></a>Selection of Lyapunov Function of LTI</h5><p>Def.: A square $n\times n$ matrix $M$ is positive definite (p.d.) if<br>$$<br>x \neq 0 \Rightarrow x^TMx&gt;0<br>$$</p><p>$$<br>\forall Q&gt;0, \exists P&gt;0:~A^TP+PA=-Q<br>$$</p><p>Then, choose $V(x) = x^TPx$ as candidate for the nonlinear system.</p><h4 id="Krasovskii-’s-method"><a href="#Krasovskii-’s-method" class="headerlink" title="Krasovskii ’s method"></a>Krasovskii ’s method</h4><p>$\dot x=f(x),f(0)=0$, $x^*=0$ is  an isolated equilibrium.</p><p>Choose $V(x)=f^Tf$, then $V$ is loally p.d.<br>$$<br>\dot V(x)=\dot f^Tf+f^T\dot f<br>$$</p><p>$$<br>\dot f(x)=\frac {\delta f}{\delta x}\dot x=\frac {\delta f}{\delta x}f(x):=A(x)f(x)<br>$$</p><p>$$<br>\Rightarrow \dot V(x)=f^TA^Tf+f^TAf=f^T(A^T+A)f:=f^TFf<br>$$</p><p>Thus, the equilibrium $x^∗ = 0$ is asymptotically stable if, locally,<br>$$<br>F(x)=A^T(x)+A(x)&lt;0<br>$$<br>It is globally asymptotically stable if this holds globally.</p><p><strong>e.g.</strong> Consider<br>$$<br>\begin{cases}\dot x_1=-3x_1+x_2 \\ \dot x_2=x_1-x_2-x_2^3\end{cases}<br>$$</p><p>$$<br>A(x)=\frac {\delta f}{\delta x}=\left[\begin{matrix}-3&amp;1 \\ 1 &amp;-1-3x_2^2\end{matrix}\right],~ A(x)+A^T(x)=\left[\begin{matrix}-6&amp;2 \\ 2 &amp;-2-6x_2^2\end{matrix}\right]<br>$$</p><p>$F$ is  negative definite, hence the origin is asymptotically stable. The Lyapunov function used is<br>$$<br>V(x)=(-3x_1+x_2)^2+(x_1-x_2-x_2^3)^2<br>$$<br>which is radially unbounded. Hence we can further conclude that the system is globally asymptotically stable at the origin.</p><h5 id="Generalized-Krasovskii-Theorem"><a href="#Generalized-Krasovskii-Theorem" class="headerlink" title="Generalized Krasovskii Theorem"></a>Generalized Krasovskii Theorem</h5><p>$$<br>\exists P&gt;0,Q&gt;0:F(x)=A^TP+PA+Q\leq 0<br>$$</p><p>Then, choose $V(x) = f^TP f$ as candidate for the nonlinear system.</p><h4 id="Variable-Gradient-Method"><a href="#Variable-Gradient-Method" class="headerlink" title="Variable Gradient Method"></a>Variable Gradient Method</h4><p>Consider $V(x)$ defined by its gradient $∇V$ of the form<br>$$<br>∇V_i =\frac {∂V}{∂x_i}=\sum_{j=1}^n a_{ij}x_j<br>$$<br>Step 1: Find $a_{ij}$ so that $\dot V = ∇V· f$ is negative definite (locally or globally)</p><p>Step 2: Solve for $a_{ij}$ so that $\frac {∂∇V_i}{∂x_j} = \frac {∂∇V_j}{∂x_i}$</p><p>Step 3: Compute $V$ from $∇V$ by integration along a rectilinear path, and check whether $V$ is positive definite:<br>$$<br>V(x)=\int_0^{x_1}∇V_1(z_1,0,…,0)dz_1+\int_0^{x_2}∇V_2(x_1,z_2,0,…,0)dz_2+…+\int_0^{x_n}∇V_n(x_1,…x_{n-1},z_n)dz_n<br>$$<br>Step 4: Finally, check that $V &gt; 0$.</p><p><strong>e.g.</strong> Consider<br>$$<br>\begin{cases} \dot x_1=-x_1+2x_1^2x_2 \\ \dot x_2=-x_2\end{cases}<br>$$<br>Let<br>$$<br>∇V=\left[ \begin{matrix} a_{11}x_1+a_{12}x_2 \\ a_{12}x_1+a_{22}x_2 \end{matrix}\right]<br>$$</p><p>$$<br>\dot V=(a_{11}x_1+a_{12}x_2)(-x_1+2x_1^2x_2)+(a_{12}x_1+a_{22}x_2)(-x_2)<br>\\=-a_{11}x_1^2+2a_{11}x_1^3x_2-2a_{12}x_1x_2+2a_{12}x_1^2x_2^2-a_{22}x_2^2<br>$$</p><p>To have $\dot V&lt;0$, choose $a_{12}=0$ and $a_{11}=a_{22}=1$. Then<br>$$<br>\dot V =-x_1^2(1-2x_1x_2)-x_2^2&lt;0<br>$$<br>while $x_1x_2&lt;\frac 12$. Hence $V(x)=\frac 12 (x_1^2+x_2^2)$ is p.d.</p><p>The origin is asymptotically stable, but only locally.</p><h4 id="Physically-Motivated-Lyapunov-Functions"><a href="#Physically-Motivated-Lyapunov-Functions" class="headerlink" title="Physically Motivated Lyapunov Functions"></a>Physically Motivated Lyapunov Functions</h4><ul><li>Purely mathematical approach, though effective for simple systems, may be of little use for complicated dynamic equations.</li></ul><p><strong>e.g.</strong> Tunnel diode circuit</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/tunnel.png" alt="Tunnel diode circuit"></p><p>Choose $x_1=v_C,x_2=i_L$</p><p>The circuit dynamics:<br>$$<br>\begin{cases} \dot x_1=\frac 1 C [-h(x_1)+x_2] \\ \dot x_2=\frac 1 L [-x_1-Rx_2+u]\end{cases}<br>$$<br>eq. pts can be derived by solving $h(x_1)=\frac E R -\frac 1 R x_1$</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/eqpt.png" alt="eq.s"></p><p>Choose energy function:<br>$$<br>V=\frac 1 2 C v_C^2+\frac 1 2 L i_L^2=\frac 1 2 C x_1^2+\frac 1 2 L x_2^2<br>$$</p><p>$$<br>\dot V=Cx_1 \dot x_1+Lx_2 \dot x_2=x_1[-h(x_1)+x_2]+x_2[-x_1-Rx_2]=-x_1h(x_1)-Rx_2^2 \leq 0<br>$$</p><p>Only $x\equiv0$ s.t. $\dot V=0\Rightarrow$ the origin is A.S.</p><ul><li>Engineering insight and physical properties are used for powerful Lyapunov analysis.</li></ul><p><strong>e.g.</strong> The dynamics of an n-link robot arm<br>$$<br>H(q)\ddot q+b(q,\dot q)+g(q)=\tau<br>$$<br>where $q$ is the vector of joint positions<br>$τ$ is the vector of input torques<br>$g$ is the vector of gravitational torques<br>$H$ is the inertia matrix<br>$b$ is the Coriolis and centripetal force</p><p>Consider a PD controller with a gravity compensation term<br>$$<br>τ=−K_Dq ̇−K_Pq+g(q)<br>$$<br>where $K_D$ and $K_P$ are constant positive definite $n×n$ matrices</p><p>Choose energy function:<br>$$<br>V=\frac 1 2[\dot q^TH\dot q +q^TK_Pq]<br>$$</p><p>$$<br>\dot V =\dot q^T(\tau -g)+\dot q^TK_Pq=-\dot q^TK_D\dot q\leq 0<br>$$</p><p>Only $x\equiv0$ s.t. $\dot V=0\Rightarrow$ the origin is A.S.</p><h4 id="Performance-Analysis"><a href="#Performance-Analysis" class="headerlink" title="Performance Analysis"></a>Performance Analysis</h4><p>a. $\dot W(t)+\alpha W(t)\leq 0 \Rightarrow W(t)\leq W(0)e^{-\alpha t}$</p><p>b. Estimating convergence rates</p><ul><li><p>for linear systems<br>$$<br>x^TQx\ge \frac {\lambda_{min}(Q)}{\lambda_{max}(P)}x^T[\lambda_{max}(P)I]x\ge \gamma V<br>$$</p><p>$$<br>\dot V \ge -\gamma V \Rightarrow V=x^TPx \le V(0)e^{-\gamma t}<br>$$</p><p>while $x^TPx\ge \lambda_{min}(P)||x(t)||^2$, thus the state $x$ converges to the origin with a rate of at least $\frac \gamma 2$.</p><p>Note that the convergence rate estimate is largest for $Q = I$.</p></li><li><p>for nonlinear systems, $V$ and $\dot V$ are not necessarily quadratic functions of the states.</p></li></ul><h3 id="Control-Design-Based-on-Lyapunov-‘s-Direct-Method"><a href="#Control-Design-Based-on-Lyapunov-‘s-Direct-Method" class="headerlink" title="Control Design Based on Lyapunov ‘s Direct Method"></a>Control Design Based on Lyapunov ‘s Direct Method</h3><ul><li>Hypothesizing one form of control law and then finding a Lyapunov function</li><li>Hypothesizing a Lyapunov function candidate and then finding a control law to make this candidate a real Lyapunov function.</li></ul><h3 id="Lyapunov-Like-Analysis-Using-Barbalat-‘s-Lemma"><a href="#Lyapunov-Like-Analysis-Using-Barbalat-‘s-Lemma" class="headerlink" title="Lyapunov-Like Analysis Using Barbalat ‘s Lemma"></a>Lyapunov-Like Analysis Using Barbalat ‘s Lemma</h3><p>Invariant set theorems are used for autonomous systems, while Barbalat ‘s Lemma is suit for non-autonomous systems, like:</p><ul><li>periodic systems;</li><li>almost periodic systems: $\forall\epsilon &gt; 0,\exists  T_{\epsilon} &gt; 0 : || x(t_0 + T) − x_0||&lt;\epsilon$</li><li>asymptotically time-invariant systems: $f(t, x)\to f_0(x),t \to \infty$</li></ul><p>Given a differentiable function $f$ of time $t$,</p><ul><li><p>$\dot f \to 0 \neq&gt; f ~ converges$</p><p><strong>e.g.</strong> Consider $f(t)=sin[log(t)]$</p><p>$\dot f(t)=\frac 1 tcos[log(t)]\to 0 as t \to \infty$</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/ft1.png"></p></li><li><p>$f~converges \neq &gt;\dot f \to 0$</p><p><strong>e.g.</strong> Consider $f(t)=e^{-t}sin(e^{2t})\to 0 as t\to \infty$</p><p>$\dot f(t)=e^{-t}sin(e^{2t})+2e^{t}cos(e^{2t})$</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/ft2.png"></p></li><li><p>If $f$ is lower bounded and decreasing, then it converges to a limit.</p></li></ul><h4 id="Barbalat-‘s-Lemma"><a href="#Barbalat-‘s-Lemma" class="headerlink" title="Barbalat ‘s Lemma"></a>Barbalat ‘s Lemma</h4><p>If the differentiable function f has a finite limit as $t \to \infty$, and if $\dot f$ is uniformly continuous, then $\dot f(t)\to 0$ as $t \to \infty$.</p><h4 id="Stability-Analysis-via-Barbalat-’s-Lemma"><a href="#Stability-Analysis-via-Barbalat-’s-Lemma" class="headerlink" title="Stability Analysis via Barbalat ’s Lemma"></a>Stability Analysis via Barbalat ’s Lemma</h4><p><strong>Lyapunov-Like Lemma</strong> Consider the time-varying system $\dot x = f(x, t)$ on $R^n$. Let $V$ that satisfies the following conditions:</p><ul><li>$V (x, t)$ is lower bounded</li><li>$\dot V(x,t) \le 0$</li><li>$\dot V(x,t)$ is uniformly continuous in time</li></ul><p>Then, $\dot V (x(t), t) \to 0$ as $t\to ∞$.</p><p>Note: The lemma only guarantees $\dot V (x(t), t) \to 0$ and does not say anything about the stability of the system. One needs to analyze the set $E={(x,t):\dot V(x,t)=0 }$ before drawing any further conclusion.</p><p><strong>e.g.</strong>  Adaptive control system with unknown parameter:<br>$$<br>\dot e =-e+\theta \omega(t), \dot \theta =-e \omega(t)<br>$$<br>where $e$ is the error state, $θ$ is a control parameter, $\omega(t)$ is a bounded continuous function of time.</p><p>Consider $V=e^2+\theta ^2$, then<br>$$<br>\dot V(e,\theta,t)=2e(-e+\theta \omega(t))+2\theta(-e\omega(t))=-2e^2 \le 0<br>$$<br>Therefore, $V (e(t), θ(t), t)$ is bounded, which also means that $e(t)$, $θ(t)$ are also bounded.</p><p>To use Barbalat, check the second derivative:<br>$$<br>\ddot V(e,\theta,t)=-4e(-e+\theta \omega(t))<br>$$<br>This concludes that $e(t) → 0$ as $t →∞$. However, we cannot conclude the system is asymptotically stable since $θ$ is only bounded.</p><h2 id="3-Feedback-linearization"><a href="#3-Feedback-linearization" class="headerlink" title="3 Feedback linearization"></a>3 Feedback linearization</h2><h3 id="0-Nonlinear-Control-Systems-Design"><a href="#0-Nonlinear-Control-Systems-Design" class="headerlink" title="0 Nonlinear Control Systems Design"></a>0 Nonlinear Control Systems Design</h3><h4 id="Classification"><a href="#Classification" class="headerlink" title="Classification"></a>Classification</h4><h5 id="a-Stabilization-problems"><a href="#a-Stabilization-problems" class="headerlink" title="a. Stabilization problems"></a>a. Stabilization problems</h5><p>Def. for a nonlinear dynamic system $\dot x = f(x,u,t)$, find a control law s. t. $x \to 0 <del>as</del> t \to \infty$ in region $\Omega$</p><p><strong>e.g.</strong> Stabilization of a pendulum</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/pendulum.png" alt="pendulum"><br>$$<br>J\ddot \theta - mglsin\theta =\tau<br>$$<br>if $\tau=-k_d \dot \theta -k_p \theta -mglsin \theta$</p><p>the dynamic becomes<br>$$<br>J\ddot \theta + k_d \dot \theta + k_p \theta=0<br>$$<br>if $\tau=-k_d \dot \theta -2mglsin \theta$</p><p>the dynamic becomes<br>$$<br>J\ddot \theta + k_d \dot \theta + mglsin \theta=0<br>$$<br>This amounts to artificially reverting the gravity field and adding viscous damping.</p><p>However, if the system changes to</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/pendulum2.png" alt="pendulum2"></p><p>It is surprisingly difficult to solve in a systematic fashion.</p><h5 id="b-Tracking-problem"><a href="#b-Tracking-problem" class="headerlink" title="b. Tracking problem"></a>b. Tracking problem</h5><p>Def. for a nonlinear dynamic system $\dot x = f(x,u,t), y=h(x)$, find a control law s. t. $y-y_d \to 0$ while the whole state $x$ remains bounded in region $\Omega$</p><h4 id="Desired-behaviors"><a href="#Desired-behaviors" class="headerlink" title="Desired behaviors"></a>Desired behaviors</h4><p>Stability, accuracy and speed of response, robustness.</p><p><strong>Steps:</strong></p><ol><li>specify the desired behavior, and select actuators and sensors; </li><li>model the physical plant by a set of differential equations; </li><li>design a control law for the system; </li><li>analyze and simulate the resulting control system;</li><li>implement the control system in hardware.</li></ol><p><strong>Feedforward and feedback</strong></p><p>Feedforward could cancel the effects of known disturbances and provide anticipative actions in tracking tasks; feedback makes the system stable; feedforward is much more important than in linear control.</p><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><h5 id="a-Trial-and-error"><a href="#a-Trial-and-error" class="headerlink" title="a. Trial-and-error"></a>a. Trial-and-error</h5><p>use the analysis tools to guide the search for a controller</p><h5 id="b-Feedback-linearization"><a href="#b-Feedback-linearization" class="headerlink" title="b. Feedback linearization"></a>b. Feedback linearization</h5><p>transform a nonlinear system into a linear system, and then use linear design techniques to<br>complete the control design.</p><h5 id="c-Robust-control"><a href="#c-Robust-control" class="headerlink" title="c. Robust control"></a>c. Robust control</h5><p>consider both model and uncertainties</p><h5 id="d-Adaptive-control"><a href="#d-Adaptive-control" class="headerlink" title="d. Adaptive control"></a>d. Adaptive control</h5><p>suit for systems with known structure, but unknown constant or nonlinear parameters</p><h5 id="e-Gain-scheduling"><a href="#e-Gain-scheduling" class="headerlink" title="e. Gain-scheduling"></a>e. Gain-scheduling</h5><p>linear time-invariant approximation in many operating points</p><h3 id="1-Intuitive-Concepts"><a href="#1-Intuitive-Concepts" class="headerlink" title="1 Intuitive Concepts"></a>1 Intuitive Concepts</h3><h4 id="1-1-Feedback-Linearization-And-The-Canonical-Form"><a href="#1-1-Feedback-Linearization-And-The-Canonical-Form" class="headerlink" title="1.1 Feedback Linearization And The Canonical Form"></a>1.1 Feedback Linearization And The Canonical Form</h4><p>$$<br>x^{(n)}=f(x)+b(x)u<br>$$</p><p>$$<br>u=\frac 1 b(v-f)<br>$$</p><h4 id="1-2-Input-State-Linearization-dot-x-f-x-u"><a href="#1-2-Input-State-Linearization-dot-x-f-x-u" class="headerlink" title="1.2 Input-State Linearization $\dot x = f(x,u)$"></a>1.2 Input-State Linearization $\dot x = f(x,u)$</h4><ul><li>$\Omega$ is large but not global</li><li>Jacobian linearization is control, but here it is based on feedback</li><li>new state $z$ must be available(physically meaningful)</li><li>tracking must be in terms of new state vector</li></ul><h4 id="1-3-Input-Output-Linearization-dot-x-f-x-u-y-h-x"><a href="#1-3-Input-Output-Linearization-dot-x-f-x-u-y-h-x" class="headerlink" title="1.3 Input-Output Linearization $\dot x = f(x,u),y=h(x)$"></a>1.3 Input-Output Linearization $\dot x = f(x,u),y=h(x)$</h4><ul><li><p>$y$ is only indirectly related to the input $u$ -&gt; find a direct and simple relation between $y$ and $u$</p></li><li><p>If differentiate $y$ for $r$ times to generate relationship with $u$, the system has relative degree $r$</p></li><li><p>stabilization just set $y_d=0$</p></li></ul><p><strong>Internal dynamics</strong>: unobservable part of the system dynamics(relative degree $r$ &lt; order $n$)</p><p>Stability of internal dynamics means BIBO</p><ul><li>the internal dynamic of linear system is related to zeros - left half-plane zero -&gt; stable</li></ul><p><strong>Zero dynamics</strong></p><p>Def. the internal dynamics of the system when the system output is kept at zero by the input</p><ul><li>only <em>local stability</em> is guaranteed for the internal dynamics even if the zero-dynamics is globally exponentially stable</li><li>find the stability of linearization of a more general nonlinear model</li></ul><p><strong>e.g.</strong> How to control the liquid level $ℎ$ to track $ℎ_d$</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/hd.png" alt="tank"></p><p>Step 1: The control objective is $ℎ=ℎ_d$. Measurement of system states, e.g., the liquid level $ℎ$, is available.</p><p>Step 2: Model the system via equations or inequalities.<br>$$<br>\frac d {dt}\int_0 ^t A(h)dh=u(t)-a\sqrt{2gh}<br>$$<br><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/hd2.png" alt="tank"></p><p>Step 3: Design a control law</p><p>The model can be rewritten as $A\dot h=u-a\sqrt{2gh}$</p><p>$u$ can be designed as $u=a\sqrt{2gh}+Av$</p><p>Define $\tilde h=h-h_d$ and design $v=\dot h_d(t)-\alpha \tilde h$</p><p>we have the closed-loop dynamics $\dot{\tilde h}+\alpha \tilde h=0$</p><p>which is a stable linear system.</p><h2 id="4-Sliding-mode-control"><a href="#4-Sliding-mode-control" class="headerlink" title="4 Sliding mode control"></a>4 Sliding mode control</h2><h3 id="0-Introduction-to-robust-control"><a href="#0-Introduction-to-robust-control" class="headerlink" title="0 Introduction to robust control"></a>0 Introduction to robust control</h3><p>Modeling inaccuracies:</p><ul><li>structured (or parametric) uncertainties</li><li>unstructured uncertainties (or unmodeled dynamics)</li></ul><p>Two complementary solutions:</p><ul><li>robust control</li><li>adaptive control</li></ul><p>A simple approach to robust control is the so-called <strong>sliding control methodology</strong></p><h3 id="1-Sliding-surface"><a href="#1-Sliding-surface" class="headerlink" title="1 Sliding surface"></a>1 Sliding surface</h3><p>$$<br>x^{(n)}=f(x)+b(x)u<br>$$</p><p>$f(x,t),b(x,t)$ are unknown, but their estimation $|\hat f(x,t) - f(x,t)| \leq F(x,t)$ and the bound $F(t)$ are known</p><p>Problem: let $x$ track $x_d = [x_d, \dot x_d … x_d^{(n-1)}]^T$ in the presence of model imprecision on<br>$f(x)$ and $b(x)$<br>$$<br>\tilde x=x-x_d=[\tilde x_d, \dot{\tilde{x_d}} … \tilde{x_d}^{(n-1)}]^T<br>$$<br>Surface $S(t)$:<br>$$<br>s(x;t)=(\frac d {dt}+\lambda)^{n-1}\tilde x<br>$$<br>*: $p = (d/dt)$ is the <strong>Laplace operator</strong></p><p>The unique solution of $s \equiv 0$ is $\tilde x \equiv 0$</p><p>Assume $\tilde x(0) = 0$<br>$$<br>\forall t \geq 0, |s(t)| \leq \Phi \Rightarrow \forall t \geq 0, |\tilde{x}^{(i)}(t)|\leq(2 \lambda)^i\varepsilon<br>$$<br>where $\varepsilon = \Phi/\lambda^{n-1}$</p><h4 id="Design-of-controller"><a href="#Design-of-controller" class="headerlink" title="Design of controller"></a>Design of controller</h4><ul><li>Choose $u$ s. t. $\frac 1 2 \frac d {dt} s^2 \leq - \eta |s|$</li><li>the discontinuous $u$ is smoothed to achieve an optimal trade-off between control bandwidth and tracking precision</li></ul><p><strong>Chattering</strong></p><p>Reason: associated control switchings is not instantaneous and $s$ is not known with infinite precision</p><h4 id="Filippov’s-Construction-of-the-Equivalent-Dynamic"><a href="#Filippov’s-Construction-of-the-Equivalent-Dynamic" class="headerlink" title="Filippov’s Construction of the Equivalent Dynamic"></a><strong>Filippov’s Construction of</strong> <strong>the</strong> Equivalent Dynamic</h4><p>$$<br>\dot s =0, \ddot x =f+u\Rightarrow u_{eq}=-f+\ddot x_d-\lambda \dot{\tilde x}<br>$$</p><p> the equivalent control can be constructed as<br>$$<br>u_{eq}=\alpha u_++(1-\alpha)u_-<br>$$</p><h4 id="Integral-control"><a href="#Integral-control" class="headerlink" title="Integral control"></a>Integral control</h4><p>$$<br>s=(\frac d {dt}+\lambda)^{2}\int _0^t\tilde xdr<br>$$</p><p>$$<br>\hat u = -\hat f +\ddot x_d-2\lambda \dot{\tilde x}-\lambda ^2 \tilde x<br>$$</p><h4 id="Gain-margins"><a href="#Gain-margins" class="headerlink" title="Gain margins"></a>Gain margins</h4><p>$$<br>\ddot x =f+bu<br>$$</p><p>$$<br>0&lt;b_{min}\leq b\leq b_{max} \Rightarrow \hat b=\sqrt{b_{min} b_{max}}<br>$$</p><p>$$<br>\beta=\sqrt{\frac {b_{min}} {b_{max}}}\Rightarrow \beta^{-1}\leq \frac {\hat b} b \leq \beta, \beta^{-1}\leq \frac b {\hat b}  \leq \beta<br>$$</p><p>$\beta$ is called the gain margin of the design<br>$$<br>u=\hat b^{-1}[\hat u-k sgn(s)]<br>$$<br>where $k \geq \beta(F+\eta)+(\beta-1)|\hat u|$</p><p>When chattering is acceptable:</p><ul><li>pulse-width modulation - the $u$ is electrical voltage</li><li>linear observer - it track the surface $s_e=0$</li><li>place of dither - the uncertainty is small but difficult to model, e.g. stiction or actuator ripple</li></ul><h3 id="2-Continuous-approximations-of-switching-control-laws"><a href="#2-Continuous-approximations-of-switching-control-laws" class="headerlink" title="2 Continuous approximations of switching control laws"></a>2 Continuous approximations of switching control laws</h3><p>Boundary layer<br>$$<br>B(t)={ x,|s(x;t)|\leq \Phi} , \Phi &gt;0<br>$$<br>$sgn(s)\to \frac s \Phi$ s. t.  tracking to within a guaranteed precision $\varepsilon$ rather than perfect tracking</p><p>In fact, it assigns a low-pass filter to $s$, thus eliminating chattering<br>$$<br>\lambda= \frac {\bar k(x_d)} \Phi<br>$$<br><strong>Balance condition</strong> : $\dot \Phi + \lambda \Phi=k(x_d)$</p><h4 id="Limitations-of-lambda"><a href="#Limitations-of-lambda" class="headerlink" title="Limitations of $\lambda$"></a>Limitations of $\lambda$</h4><ul><li> structural resonant modes $v_R$: $\lambda \leq \lambda_R \approx \frac {2\pi} {3}v_R$</li><li> neglected time delays $T_A$ : $\lambda \leq \lambda_A \approx \frac {1} {3T_A}$</li><li> sampling rate $v_{sampling}$: $\lambda \leq \lambda_S \approx \frac {1} {5}v_{sampling}$</li></ul><h2 id="5-Adaptive-control"><a href="#5-Adaptive-control" class="headerlink" title="5 Adaptive control"></a>5 Adaptive control</h2><h3 id="1-Basic-Concepts-in-Adaptive-Control"><a href="#1-Basic-Concepts-in-Adaptive-Control" class="headerlink" title="1 Basic Concepts in Adaptive Control"></a>1 Basic Concepts in Adaptive Control</h3><p>Suit for:</p><ul><li>Robot manipulating different distributions</li><li>Ship steering with uncertain parameters</li><li>Aircraft control on altitude, speed and configuration</li><li>Process control in metallurgical and chemical processes (most important)</li></ul><p>Adaptive control is superior in dealing with uncertainties in constant or slowly-varying parameters - it will $\uparrow$ performance as adaption go on, and requires little priori estimation on parameters</p><p>Robust could realize <em>linear parameterization</em></p><h4 id="Two-ways-to-design-adaptive-controller"><a href="#Two-ways-to-design-adaptive-controller" class="headerlink" title="Two ways to design adaptive controller"></a>Two ways to design adaptive controller</h4><ul><li><h5 id="MODEL-REFERENCE-ADAPTIVE-CONTROL-MRAC"><a href="#MODEL-REFERENCE-ADAPTIVE-CONTROL-MRAC" class="headerlink" title="MODEL-REFERENCE ADAPTIVE CONTROL (MRAC)"></a>MODEL-REFERENCE ADAPTIVE CONTROL (MRAC)</h5></li></ul><p>♦ a plant containing unknown parameters</p><p>♦ a reference model</p><p>♦ feedback control law containing adjustable parameters</p><p>♦ adaptation mechanism for updating parameters</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/MRAC.png" alt="MRAC"></p><p>*: The controller must have perfect tracking capacity</p><ul><li><h5 id="SELF-TUNING-CONTROLLERS-STC"><a href="#SELF-TUNING-CONTROLLERS-STC" class="headerlink" title="SELF-TUNING CONTROLLERS (STC)"></a>SELF-TUNING CONTROLLERS (STC)</h5></li></ul><p>♦ $u, y\to\hat a$</p><p>♦ $r,\hat a \to u \to y$</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/MRAC.png" alt="STC"></p><p>Estimators: pole-placement, PID, LQR (linear quadratic control), minimum variance control, or $H^\infty$designs.</p><p>Estimating system parameter: indirect adaptive control</p><p>Estimating controller parameter: direct adaptive control</p><h5 id="Comparing"><a href="#Comparing" class="headerlink" title="Comparing:"></a>Comparing:</h5><p>MRAC: min tracking error; more stability and convergence; suit for continuous</p><p>STC: min data-fitting error in input-output measurements; more flexible; suit for discrete</p><h4 id="Design-steps"><a href="#Design-steps" class="headerlink" title="Design steps"></a>Design steps</h4><ul><li>choose a control law containing variable parameters</li><li>choose an adaptation law for adjusting those parameters</li><li>analyze the convergence properties of the resulting control system</li></ul><h5 id="Lemma"><a href="#Lemma" class="headerlink" title="Lemma"></a>Lemma</h5><p>$$<br>e(t)=H(p)[k\phi^T (t)v(t)]<br>$$</p><p>$H(p)$ is strictly positive real(SPR) transfer function, then if<br>$$<br>\dot \phi (t) = -sgn(k)\gamma e v(t)<br>$$<br>then $e(t)$ and $\phi(t)$ are globally bounded.</p><p>Furthermore, if $v$ is bounded, then $e(t)\to 0$ as $t \to \infty$</p><h3 id="2-Adaptive-Control-of-First-Order-Systems"><a href="#2-Adaptive-Control-of-First-Order-Systems" class="headerlink" title="2 Adaptive Control of First-Order Systems"></a>2 Adaptive Control of First-Order Systems</h3><p>Formal first-order differential equation:<br>$$<br>\dot y=-a_p y+b_pu<br>$$<br>Problem specification:<br>$$<br>\dot y_m=-a_m y_m+b_mr(t)<br>$$<br>where $r(t)$ is a bounded external signal</p><p>the reference model:<br>$$<br>y_m=Mr, M=\frac {b_m} {p+a_m}<br>$$<br>choose the control law:<br>$$<br>u=\hat a_r(t)r+\hat a_y(t)y<br>$$<br>the closed-loop system is<br>$$<br>\dot y=-(a_p-\hat a_yb_p)y+\hat a_rb_pr(t)<br>$$<br>which yields zero tracking error when the plant parameters are known</p><p><img src="/2021/09/21/NOTE/Applied_Nonlinear_Control/first-order.png" alt="first-order"><br>$$<br>\dot e =-a_me+b_p(\tilde a_rr+\tilde a_yy)<br>$$</p><p>$$<br>e=\frac 1 {a_r^*} M(\tilde a_rr+\tilde a_yy)<br>$$</p><p>thus the adaptive law is<br>$$<br>\dot{\hat a_r}=-sgn(b_p)\gamma er, \dot{\hat a_y}=-sgn(b_p)\gamma ey<br>$$<br>Tracking convergence can be proved:<br>$$<br>V=\frac 1 2 e^2+\frac 1 {2 \gamma}|b_p|(\tilde a_r^2+\tilde a_y^2)<br>$$</p><p>$$<br>\dot V=-a_me^2<br>$$</p><p>Note: $v=[r~y]^T, a=[a_r ~ a_y]^T$</p><p>parameter error converge if<br>$$<br>\forall t&gt;0, \int_t^{t+T}vv^Tdr\geq\alpha_1I<br>$$<br>converge to 0 if<br>$$<br>\int_t^{t+T}vv^Tdr\tilde a=0<br>$$<br>– <em><strong>persistent excitation</strong></em></p><p>at least one sinusoidal component -&gt; persistent excitation</p><h4 id="For-nonlinear-system"><a href="#For-nonlinear-system" class="headerlink" title="For nonlinear system"></a>For nonlinear system</h4><p>$$<br>\dot y=-a_p y-c_pf(y)+b_pu<br>$$</p><p>choose the control law:<br>$$<br>u=\hat a_r(t)r+\hat a_f f(y) +\hat a_y(t)y<br>$$</p><p>$$<br>\dot e =-\frac 1 {k_r^*} M(\tilde a_rr+\hat a_f f(y)+\tilde a_yy)<br>$$</p><p>$$<br>\tilde a_f=\hat a_f-\frac {c_p} {b_p}<br>$$</p><p>thus the adaptive law is<br>$$<br>\dot{\hat a_r}=-sgn(b_p)\gamma er, \dot{\hat a_y}=-sgn(b_p)\gamma ey, \dot{\hat a_f}=-sgn(b_p)\gamma ef<br>$$<br>for $v=[r<del>y</del>f]^T$</p><p>parameter error converge if<br>$$<br>\forall t&gt;0, \int_t^{t+T}vv^Tdr\geq\alpha_1I<br>$$<br>Note: the convergent estimation of $m$ parameters require at least m/2 sinusoids in $r(t)$</p><h3 id="3-Adaptive-Control-of-Linear-Systems-With-Full-State"><a href="#3-Adaptive-Control-of-Linear-Systems-With-Full-State" class="headerlink" title="3 Adaptive Control of Linear Systems With Full State"></a>3 Adaptive Control of Linear Systems With Full State</h3><p>Feedback</p><p>$$<br>a_ny^{(n)}+a_{n-1}y^{(n-1)}+…+a_0y=u<br>$$</p><p>define<br>$$<br>z(t)=y_m^{(n)}-\beta_{n-1}e^{(n-1)}-…-\beta_0e<br>$$</p><p>$$<br>a_n[y^{(n)}-z]=u-a_nz-a_{n-1}y^{(n-1)}-…-a_0y<br>$$</p><p>choose the control law</p><p>$$<br>u=\hat a_nz+\hat a_{n-1}y^{(n-1)}+…+\hat a_0 y=v^T(t)\hat a(t)<br>$$<br>where $v(t)=[z(t)<del>y^{(n-1)}</del>…<del>\dot y</del>y]^T, \hat a(t)=[\hat a_n<del>\hat a_{n-1}</del>…<del>\hat a_1</del>\hat a_0]^T$</p><p>the tracking error satisfy<br>$$<br>a_n[e^{(n)}+\beta_{n-1}e^{(n-1)}+…+\beta_0e]=v^T(t)\tilde a(t)<br>$$</p><p>$$<br>\tilde a =\hat a-a<br>$$</p><p> rewrite the closed-loop error dynamics  in state space form,<br>$$<br>\dot x=Ax+b[(1/a_n)v^T\tilde a], e=cx<br>$$<br> rewrite the closedloop error dynamics (8.40) in state space form,<br>$$<br>V=x^TPx+\tilde a^T\Gamma ^{-1}\tilde a<br>$$<br>the adaptive law<br>$$<br>\dot {\hat a}=-\Gamma v b^TPx<br>$$</p><h3 id="4-Adaptive-Control-of-Linear-Systems-With-Output-Feedback"><a href="#4-Adaptive-Control-of-Linear-Systems-With-Output-Feedback" class="headerlink" title="4 Adaptive Control of Linear Systems With Output Feedback"></a>4 Adaptive Control of Linear Systems With Output Feedback</h3><p>LTI:<br>$$<br>W(p)=k_p \frac {Z_p(p)} {R_p(p)}<br>$$<br>the reference model<br>$$<br>W_m(p)=k_m \frac {Z_m} {R_m}<br>$$<br>where $n_m-m_m\geq n-m$</p><h4 id="n-m-1"><a href="#n-m-1" class="headerlink" title="$n-m=1$"></a>$n-m=1$</h4><p>system<br>$$<br>y=\frac {k_p(p+b_p)} {p^2+a_{p1}p+a_{p2}}u<br>$$<br>control law<br>$$<br>u=k(t)r+\theta_1(t)\omega_1+\theta_2(t)\omega_2+\theta_0(t)y<br>$$<br>adaptive law<br>$$<br>\dot \theta=-sgn(k_p)\gamma e(t)\omega(t)<br>$$</p><h4 id="high-order"><a href="#high-order" class="headerlink" title="high order"></a>high order</h4><p>control law is similar, but adaptive law<br>$$<br>\dot \theta=-\frac {sgn(k_p)\gamma \varepsilon\underline\omega} {1+\underline\omega^T\underline\omega}<br>$$</p><p>$$<br>\alpha (t)= \frac 1 {k^*}+\phi_a(t)<br>$$</p><p>$$<br>\dot \alpha=-\frac {\gamma \varepsilon \eta}{1+\underline\omega^T\underline\omega}<br>$$</p><h3 id="5-Adaptive-Control-of-Nonlinear-Systems"><a href="#5-Adaptive-Control-of-Nonlinear-Systems" class="headerlink" title="5 Adaptive Control of Nonlinear Systems"></a>5 Adaptive Control of Nonlinear Systems</h3><p>when adaptive control is available for nonlinear system</p><ul><li>nonlinear plant dynamics can be linearly parameterized</li><li>the full state is measurable</li><li>nonlinearities can be canceled stably</li></ul><p>For SISO system:</p><h4 id="Problem-specification"><a href="#Problem-specification" class="headerlink" title="Problem specification"></a>Problem specification</h4><p>$$<br>y^{(n)}+\sum_{i=1}^n \alpha_i f_i(x,t)=bu<br>$$</p><p>dividing $b$ both sides<br>$$<br>hy^{(n)}+\sum_{i=1}^n a_i f_i(x,t)=u<br>$$<br>where $h=1/b,a_i=\alpha_i/b$</p><h4 id="Control-law"><a href="#Control-law" class="headerlink" title="Control law"></a>Control law</h4><p>$$<br>s=e^{(n-1)}+\lambda_{n-2}e^{(n-2)}+…+\lambda_0e=\Delta(p)e<br>$$</p><p>$$<br>s=y^{(n-1)}-y_r^{(n-1)}<br>$$</p><p>where $y_r^{(n-1)}=y_d^{(n-1)}-\lambda_{n-2}e^{(n-2)}-…-\lambda_0e$<br>$$<br>u=hy_r^{(n)}-ks+\sum _{i=1}^na_if_i(x,t)<br>$$</p><h4 id="Adaptive-law"><a href="#Adaptive-law" class="headerlink" title="Adaptive law"></a>Adaptive law</h4><p>$$<br>\dot {\hat h}=-\gamma sgn(h)sy_r^{(n)}<br>$$</p><p>$$<br>\dot {\hat a_i}=-\gamma sgn(h)sf_i<br>$$</p><p>$$<br>V=|h|s^2+\gamma^{-1}[\tilde h^2+\sum_{i=1}^n\tilde a_i^2]<br>$$</p><h3 id="6-Robustness"><a href="#6-Robustness" class="headerlink" title="6 Robustness"></a>6 Robustness</h3><p>Some non-parametric uncertainties:</p><ul><li>high-frequency unmodeled dynamics, such as actuator dynamics or structural vibrations</li><li>low-frequency unmodeled dynamics, such as Coulomb friction and stiction</li><li>measurement noise</li><li>computation roundoff error and sampling delay</li></ul><h4 id="Parameter-drift"><a href="#Parameter-drift" class="headerlink" title="Parameter drift"></a>Parameter drift</h4><p>if $v$ is persistently exciting, the controller is robust; if not, small uncertainty  will lead to drift and diverge sharply</p><h4 id="To-cancel-parameter"><a href="#To-cancel-parameter" class="headerlink" title="To cancel parameter"></a>To cancel parameter</h4><ul><li>dead-zone - for adaptive law</li><li>$\sigma$-modification - replace the original integrator in the adaptation law by a low-pass filter</li><li>regressor replacement - replace $y$ for $v(t)$ by $y_m$ which is independent of $n$ (noise)</li></ul>]]></content>
      
      
      <categories>
          
          <category> NOTE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> applied nonlinear control </tag>
            
            <tag> control theory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Resume</title>
      <link href="/2021/08/17/INFO/hello-world/"/>
      <url>/2021/08/17/INFO/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Zhiwei-Xu"><a href="#Zhiwei-Xu" class="headerlink" title="Zhiwei Xu"></a><p align="center">Zhiwei Xu</p></h1><p align="center">+86-17326085772/bramberxu@gmail.com</p><p><img src="/2021/08/17/INFO/hello-world/xzw.png" alt="xzw"></p><h2 id="Education"><a href="#Education" class="headerlink" title="Education"></a>Education</h2><h3 id="Zhejiang-University"><a href="#Zhejiang-University" class="headerlink" title="Zhejiang University"></a>Zhejiang University</h3><p align="right">09/2017-06/2021</p>B.Eng. in Automation<p><strong>Overall GPA: 3.90/4, Third-year GPA: 4.00/4 (top 10%)</strong><br><strong>Honors and Awards: The First Prize Scholarship(top 3%), ‘Renai’ Scholarship (5 selected from 41), etc.</strong></p><h3 id="Northwestern-University"><a href="#Northwestern-University" class="headerlink" title="Northwestern University"></a>Northwestern University</h3><p align="right">09/2022-present</p><p>PhD. in Electrical Engineering</p><h2 id="Research-Interests"><a href="#Research-Interests" class="headerlink" title="Research Interests"></a>Research Interests</h2><p>Soft robot, mobile robot, UAV, control theory, SLAM, ROS, computer vision, NLP, data science</p><h2 id="Research-Experience"><a href="#Research-Experience" class="headerlink" title="Research Experience"></a>Research Experience</h2><p><strong>Zhejiang University</strong>, <strong>Fusion Robotics and Human-Robot Interaction Lab</strong></p><p align="right">10/2021-8/2022</p><p>Informal Researcher</p><p><strong>Impedance control strategies for human-robot interaction of upper-limb rehabilitation robot</strong> </p><h3 id="Zhejiang-University-Thesis-Project-Hangzhou"><a href="#Zhejiang-University-Thesis-Project-Hangzhou" class="headerlink" title="Zhejiang University, Thesis Project, Hangzhou"></a>Zhejiang University, Thesis Project, Hangzhou</h3><p align="right">12/2020-06/2021</p>Student Researcher, Advisor: Professor Tiefeng Li, Professor Ruifen Hu<p><strong>Title: Design and Control of Tactile Nervous System on Bionic Soft Robotics</strong><br><strong>Designed and manufactured stress and strain sensors to detect stress on soft hands;</strong><br><strong>Build a 3D visualization platform to assist the soft hand to grasp different target objects.</strong></p><h3 id="Zhejiang-University-Research-Practice-Project-Hangzhou"><a href="#Zhejiang-University-Research-Practice-Project-Hangzhou" class="headerlink" title="Zhejiang University, Research Practice Project, Hangzhou"></a><strong>Zhejiang University</strong>, <strong>Research Practice Project</strong>, Hangzhou</h3><p align="right">05/2020-06/2021</p>Student Researcher, Advisor: Professor Tiefeng Li<p><strong>Title: Bionic Soft Robotic Flashlight-driven Artificial Muscle Collaborative Control</strong><br><strong>Designed and manufactured a soft hand with 6 DOF;</strong><br><strong>Grasped slippery and soft objects with integrated sensing information.</strong></p><h3 id="Zhejiang-University-National-Undergraduates-Innovation-Project-Hangzhou"><a href="#Zhejiang-University-National-Undergraduates-Innovation-Project-Hangzhou" class="headerlink" title="Zhejiang University, National Undergraduates Innovation Project, Hangzhou"></a><strong>Zhejiang University</strong>, National Undergraduates Innovation Project, Hangzhou</h3><p align="right">03/2019-09/2020</p>Student Researcher, Advisor: Professor Tiefeng Li<p><strong>Title: Design and Control of a Bionic Soft Robotic Hand System</strong><br><strong>Used ABAQUS for simulation, used water-soluble material PVA to improve lost-wax casting, employed 3D printing to produce to a three-cavity pneumatic soft actuator;</strong><br><strong>Used the point cloud cutting algorithm to improve the EKF algorithm, realized vision-inertial fusion sensing; compared with a single sensing method, the system has higher accuracy and sampling rate;</strong><br><strong>Designed a neural network controller with reference to the variable transfer relationship, to control the position and speed of the pneumatic soft actuator without precise modeling.</strong></p><h3 id="The-Chinese-University-of-Hong-Kong-Robotics-and-Artificial-Intelligence-Lab-Shenzhen"><a href="#The-Chinese-University-of-Hong-Kong-Robotics-and-Artificial-Intelligence-Lab-Shenzhen" class="headerlink" title="The Chinese University of Hong Kong, Robotics and Artificial Intelligence Lab, Shenzhen"></a>The Chinese University of Hong Kong, Robotics and Artificial Intelligence Lab, Shenzhen</h3><p align="right">07/2020-08/2020</p>Undergraduate Research Assistant, Advisor: Professor Zhenglong Sun<p><strong>Used dielectric elastomer materials, designed and manufactured a bionic fish bladder with a built-in elastic load, achieved a more linear movement;</strong><br><strong>Completed motion control experiments to find out the relationship between volume of the fish bladder and voltage.</strong></p><h3 id="National-Soft-Robots-Innovation-Design-Contest-Beijing"><a href="#National-Soft-Robots-Innovation-Design-Contest-Beijing" class="headerlink" title="National Soft Robots Innovation Design Contest, Beijing"></a>National Soft Robots Innovation Design Contest, Beijing</h3><p align="right">11/2018</p>Team Member, Advisor: Professor Tiefeng Li <p><strong>Title: Adaptive Dynamic Soft-hand Grasping System based on Visual Semantic Recognition</strong><br><strong>Designed and made a single-chamber soft-hand grasping structure, used a structure with a decreasing cross-sectional area from the bottom to the top, increased the curvature of the top to make it more flexible for grasping;</strong><br><strong>Won a Best Innovation Award (4 selected from 22).</strong></p><h2 id="Leadership-and-Activities"><a href="#Leadership-and-Activities" class="headerlink" title="Leadership and Activities"></a>Leadership and Activities</h2><p><strong>Five-Star Volunteer recognized by Zhejiang University, Hangzhou</strong></p><p align="right">05/2021</p><p><strong>Director, College of Control Science and Engineering, The Academics Division of Student Unions, Hangzhou</strong></p><p align="right">09/2018-09/2020</p><p><strong>Participant, “Artificial Intelligence and Industry 4.0” Summer Camp, London, Cambridge &amp; Oxford</strong></p><p align="right">07/2019</p><p><strong>Board Member and Deputy Administrator, Zhejiang University, Robotics Association, Hangzhou</strong></p><p align="right">09/2017-06/2019</p><h2 id="Skills"><a href="#Skills" class="headerlink" title="Skills"></a>Skills</h2><p><strong>Equipment:</strong> 3D printer, electric welder, film stretching machine, centrifuge, laser cutter<br><strong>Programming Languages:</strong> C, C++, Matlab, Python, R, assembly language<br><strong>Operating Systems:</strong> Windows, Linux, ROS<br><strong>Development:</strong> Arduino IDE, Clion, Keil-μVision, Pycharm, R Studio, Unity 3D, Visual Studio<br><strong>Simulation:</strong> ABAQUS, Solidworks, Multisim, Proteus<br><strong>Graphic Design:</strong> Adobe Photoshop, Auto CAD<br><strong>Others:</strong> Adobe Premiere</p>]]></content>
      
      
      <categories>
          
          <category> INFO </category>
          
      </categories>
      
      
        <tags>
            
            <tag> resume </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>R语言学习笔记</title>
      <link href="/2020/05/03/NOTE/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/05/03/NOTE/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="R语言学习笔记"><a href="#R语言学习笔记" class="headerlink" title="R语言学习笔记"></a><p align="center">R语言学习笔记</p></h1><p>该笔记来源于课程 <em>PH125.8x: Data Science: Machine Learning</em></p><p>相关证书：</p><p><img src="/2020/05/03/NOTE/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/certificate.png" alt="certificate"></p><h2 id="I-基本操作"><a href="#I-基本操作" class="headerlink" title="I 基本操作"></a>I 基本操作</h2><h3 id="一、赋值语句"><a href="#一、赋值语句" class="headerlink" title="一、赋值语句"></a>一、赋值语句</h3><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">a &lt;- 1<br>b &lt;- 1<br></code></pre></td></tr></table></figure><p><code>&lt;-</code>用来给变量赋值。</p><p>也可以使用<code>=</code>代替来分配值<code>&lt;-</code>，但尽量不要使用<code>=</code>以避免混淆。</p><p>要查看存储在变量中的值，只需让R求值<code>a</code>，它就会显示存储的值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">a<br><span class="hljs-comment">#&gt; [1] 1</span><br></code></pre></td></tr></table></figure><p>要求R显示存储的值，更明确的方法是使用<code>print</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">print(a)<br><span class="hljs-comment">#&gt; [1] 1</span><br></code></pre></td></tr></table></figure><h3 id="二、在工作区操作"><a href="#二、在工作区操作" class="headerlink" title="二、在工作区操作"></a>二、在工作区操作</h3><p>在控制台中定义对象时，实际上是在更改<em>工作空间</em>。</p><p>键入以下命令查看保存在工作空间中的所有变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">ls()<br><span class="hljs-comment">#&gt; [1] &quot;a&quot;        &quot;b&quot;        &quot;c&quot;        &quot;dat&quot;      &quot;img_path&quot; &quot;murders&quot;</span><br></code></pre></td></tr></table></figure><h3 id="三、预定义函数"><a href="#三、预定义函数" class="headerlink" title="三、预定义函数"></a>三、预定义函数</h3><p>定义变量后，通常可以将数据分析过程描述为应用于数据的一系列函数。R包含几个预定义的函数：</p><p><code>install.packages</code>，<code>library</code>，<code>ls</code>，<code>sqrt</code> ……</p><p>也可以通过软件包添加更多函数，这些函数未出现在工作空间中，但可以立即使用。</p><p>eg：如果键入<code>ls</code>，则不评估该函数，而是显示定义该函数的代码。</p><p>如果键入<code>ls()</code>，则将对其求值，将在工作空间中看到对象。</p><p>与<code>ls</code>不同，大多数函数都需要一个或多个<em>参数</em>。</p><p>eg: <code>log</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">log</span>(<span class="hljs-number">8</span>)<br><span class="hljs-comment">#&gt; [1] 2.08</span><br><span class="hljs-built_in">log</span>(a) <br><span class="hljs-comment">#&gt; [1] 0</span><br></code></pre></td></tr></table></figure><p>可以使用<code>help</code>功能来获得帮助：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">help(<span class="hljs-string">&quot;log&quot;</span>)<br></code></pre></td></tr></table></figure><p>对于大多数功能，我们还可以使用以下缩写：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">?<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>帮助页面将向您显示函数期望的参数。某些参数是必需的，而其他参数是可选的。可以通过在帮助文档中指定默认值来确定哪些参数是可选的。<code>=</code>是可选的,比如<code>log</code>默认的<code>base = exp(1)</code>。</p><p>快速查看参数而不打开帮助系统，可以键入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">args(<span class="hljs-built_in">log</span>)<br><span class="hljs-comment">#&gt; function (x, base = exp(1)) </span><br><span class="hljs-comment">#&gt; NULL</span><br></code></pre></td></tr></table></figure><p>通过分配另一个对象来更改默认值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">log</span>(<span class="hljs-number">8</span>, base = <span class="hljs-number">2</span>)<br><span class="hljs-comment">#&gt; [1] 3</span><br></code></pre></td></tr></table></figure><p>如果未使用任何参数名称，R按照帮助文件中显示的顺序或按输入参数<code>args</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">log</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>)<br><span class="hljs-comment">#&gt; [1] 3</span><br></code></pre></td></tr></table></figure><p>如果使用参数的名称，那么可以按照想要的顺序赋值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">log</span>(base = <span class="hljs-number">2</span>, x = <span class="hljs-number">8</span>)<br><span class="hljs-comment">#&gt; [1] 3</span><br></code></pre></td></tr></table></figure><p><strong>要指定参数，我们必须使用<code>=</code>，而不能使用<code>&lt;-</code>。</strong></p><h3 id="四、预建对象"><a href="#四、预建对象" class="headerlink" title="四、预建对象"></a>四、预建对象</h3><p>查看所有可用的数据集：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">data()<br></code></pre></td></tr></table></figure><p>这将显示这些数据集的对象名称。这些数据集是可以通过简单地键入名称来使用的对象。例如，如果您键入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">co2<br></code></pre></td></tr></table></figure><p>R将为您显示Mauna Loa的大气CO2浓度数据。</p><p>其他预建对象是数学量，例如常量和：π ∞</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">pi</span><br><span class="hljs-comment">#&gt; [1] 3.14</span><br><span class="hljs-literal">Inf</span>+<span class="hljs-number">1</span><br><span class="hljs-comment">#&gt; [1] Inf</span><br></code></pre></td></tr></table></figure><h2 id="II-数据类型"><a href="#II-数据类型" class="headerlink" title="II 数据类型"></a>II 数据类型</h2><p>R中的变量可以具有不同的类型。</p><p>函数<code>class</code>可帮助我们确定所拥有的对象类型：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">a &lt;- 2<br><span class="hljs-built_in">class</span>(a)<br><span class="hljs-comment">#&gt; [1] &quot;numeric&quot;</span><br></code></pre></td></tr></table></figure><h3 id="一、数据帧"><a href="#一、数据帧" class="headerlink" title="一、数据帧"></a>一、数据帧</h3><p>在R中存储数据集的最常见方法是在数据帧中。从概念上讲，我们可以将数据帧视为一个表，其中的行表示观察值，而每个观察值所报告的不同变量定义了列。</p><p>数据帧可以将不同的数据类型组合为一个对象。</p><p>eg：加载<strong>dslabs</strong>库并使用<code>data</code>功能加载数据集<code>murders</code>来访问此数据集：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">library(dslabs)<br>data(murders)<br></code></pre></td></tr></table></figure><p>实际上是一个数据帧，输入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(murders)<br><span class="hljs-comment">#&gt; [1] &quot;data.frame&quot;</span><br></code></pre></td></tr></table></figure><h3 id="二、检查对象"><a href="#二、检查对象" class="headerlink" title="二、检查对象"></a>二、检查对象</h3><p>函数<code>str</code>：查找有关对象结构的更多信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">str(murders)<br><span class="hljs-comment">#&gt; &#x27;data.frame&#x27;:    51 obs. of  5 variables:</span><br><span class="hljs-comment">#&gt; $ state : chr &quot;Alabama&quot; &quot;Alaska&quot; &quot;Arizona&quot; &quot;Arkansas&quot; ...</span><br><span class="hljs-comment">#&gt; $ abb : chr &quot;AL&quot; &quot;AK&quot; &quot;AZ&quot; &quot;AR&quot; ...</span><br><span class="hljs-comment">#&gt; $ region : Factor w/ 4 levels &quot;Northeast&quot;,&quot;South&quot;,..: 2 4 4 2 4 4 1 2 2</span><br><span class="hljs-comment">#&gt;    2 ...</span><br><span class="hljs-comment">#&gt; $ population: num 4779736 710231 6392017 2915918 37253956 ...</span><br><span class="hljs-comment">#&gt; $ total : num 135 19 232 93 1257 ...</span><br></code></pre></td></tr></table></figure><p>这告诉我们有关该对象的更多信息。我们看到该表具有51行（50个状态加DC）和五个变量。我们可以使用函数<code>head</code>显示前六行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">head(murders)<br><span class="hljs-comment">#&gt;        state abb region population total</span><br><span class="hljs-comment">#&gt; 1    Alabama  AL  South    4779736   135</span><br><span class="hljs-comment">#&gt; 2     Alaska  AK   West     710231    19</span><br><span class="hljs-comment">#&gt; 3    Arizona  AZ   West    6392017   232</span><br><span class="hljs-comment">#&gt; 4   Arkansas  AR  South    2915918    93</span><br><span class="hljs-comment">#&gt; 5 California  CA   West   37253956  1257</span><br><span class="hljs-comment">#&gt; 6   Colorado  CO   West    5029196    65</span><br></code></pre></td></tr></table></figure><p>在此数据集中，每个状态都被视为观察值，并且为每个状态报告了五个变量。</p><h3 id="三、访问器："><a href="#三、访问器：" class="headerlink" title="三、访问器：$"></a>三、访问器：<code>$</code></h3><p><code>$</code>访问此数据帧中包含的列所代表的不同变量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R">murders$population<br><span class="hljs-comment">#&gt;  [1]  4779736   710231  6392017  2915918 37253956  5029196  3574097</span><br><span class="hljs-comment">#&gt;  [8]   897934   601723 19687653  9920000  1360301  1567582 12830632</span><br><span class="hljs-comment">#&gt; [15]  6483802  3046355  2853118  4339367  4533372  1328361  5773552</span><br><span class="hljs-comment">#&gt; [22]  6547629  9883640  5303925  2967297  5988927   989415  1826341</span><br><span class="hljs-comment">#&gt; [29]  2700551  1316470  8791894  2059179 19378102  9535483   672591</span><br><span class="hljs-comment">#&gt; [36] 11536504  3751351  3831074 12702379  1052567  4625364   814180</span><br><span class="hljs-comment">#&gt; [43]  6346105 25145561  2763885   625741  8001024  6724540  1852994</span><br><span class="hljs-comment">#&gt; [50]  5686986   563626</span><br></code></pre></td></tr></table></figure><p><code>murders$population</code>的顺序保留了数据表中行的顺序。</p><h3 id="四、向量：数字，字符和逻辑"><a href="#四、向量：数字，字符和逻辑" class="headerlink" title="四、向量：数字，字符和逻辑"></a>四、向量：数字，字符和逻辑</h3><p>对象<code>murders$population</code>不是一个数字而是多个。我们称这些类型的对象为<em>向量</em>。</p><p>一个数字是一个长度为1的向量，但通常我们使用术语“向量”来指代具有多个条目的对象。函数<code>length</code>告诉您向量中有多少个条目：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">pop &lt;- murders$population<br><span class="hljs-built_in">length</span>(pop)<br><span class="hljs-comment">#&gt; [1] 51</span><br></code></pre></td></tr></table></figure><p>该特定向量是<em>数字，</em>因为总体大小是数字：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(pop)<br><span class="hljs-comment">#&gt; [1] &quot;numeric&quot;</span><br></code></pre></td></tr></table></figure><p>在数字向量中，每个条目都必须是一个数字。</p><p>为了存储字符串，向量也可以是<em>character</em>类。例如，状态名称是字符：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(murders$state)<br><span class="hljs-comment">#&gt; [1] &quot;character&quot;</span><br></code></pre></td></tr></table></figure><p>与数字向量一样，字符向量中的所有条目都必须是字符。</p><p>向量的另一种重要类型是<em>逻辑向量</em>。这些必须是<code>TRUE</code>或<code>FALSE</code>。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">z &lt;- 3 == <span class="hljs-number">2</span><br>z<br><span class="hljs-comment">#&gt; [1] FALSE</span><br><span class="hljs-built_in">class</span>(z)<br><span class="hljs-comment">#&gt; [1] &quot;logical&quot;</span><br></code></pre></td></tr></table></figure><p>这里<code>==</code>是一个关系运算符，询问3是否等于2。在R中，如果只使用一个<code>=</code>，则实际上分配了一个变量，但是如果使用两个<code>==</code>，则测试是否相等。</p><p>可以通过键入以下内容查看其他<em>关系运算符</em>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">?Comparison<br></code></pre></td></tr></table></figure><p>默认情况下，即使数字是舍入整数，数字也会被分配为类数字。</p><p>eg：<code>class(1)</code>返回数字，可以使用<code>as.integer()</code>函数或通过添加<code>L</code>如下代码将它们变成类整数<code>1L</code>。</p><p><code>class(1L)</code></p><h3 id="五、因素"><a href="#五、因素" class="headerlink" title="五、因素"></a>五、因素</h3><p>在<code>murders</code>数据集中：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(murders$region)<br><span class="hljs-comment">#&gt; [1] &quot;factor&quot;</span><br></code></pre></td></tr></table></figure><p>这是一个<em>因素</em>。因素对于存储分类数据很有用。通过使用<code>levels</code>函数可以看到只有四个区域：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">levels(murders$region)<br><span class="hljs-comment">#&gt; [1] &quot;Northeast&quot;     &quot;South&quot;         &quot;North Central&quot; &quot;West&quot;</span><br></code></pre></td></tr></table></figure><p>在后台，R将这些<em>级别</em>存储为整数，并保留一个映射以跟踪标签。这比存储所有字符更节省内存。</p><p>如果每个级别都有关联的值，我们可以使用<code>reorder</code>和指定一个数据摘要来确定顺序。以下代码将每个地区的谋杀总数加起来，并对这些总数后面的因子进行重新排序。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">region &lt;- murders$region<br>value &lt;- murders$total<br>region &lt;- reorder(region, value, FUN = <span class="hljs-built_in">sum</span>)<br>levels(region)<br><span class="hljs-comment">#&gt; [1] &quot;Northeast&quot;     &quot;North Central&quot; &quot;West&quot;          &quot;South&quot;</span><br></code></pre></td></tr></table></figure><h3 id="六、列表"><a href="#六、列表" class="headerlink" title="六、列表"></a>六、列表</h3><p>数据帧是<em>列表</em>的特例。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs R">record<br><span class="hljs-comment">#&gt; $name</span><br><span class="hljs-comment">#&gt; [1] &quot;John Doe&quot;</span><br><span class="hljs-comment">#&gt; </span><br><span class="hljs-comment">#&gt; $student_id</span><br><span class="hljs-comment">#&gt; [1] 1234</span><br><span class="hljs-comment">#&gt; </span><br><span class="hljs-comment">#&gt; $grades</span><br><span class="hljs-comment">#&gt; [1] 95 82 91 97 93</span><br><span class="hljs-comment">#&gt; </span><br><span class="hljs-comment">#&gt; $final_grade</span><br><span class="hljs-comment">#&gt; [1] &quot;A&quot;</span><br><span class="hljs-built_in">class</span>(record)<br><span class="hljs-comment">#&gt; [1] &quot;list&quot;</span><br></code></pre></td></tr></table></figure><p>与数据帧一样，可以使用<code>$</code>提取列表的组成部分。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">record$student_id<br><span class="hljs-comment">#&gt; [1] 1234</span><br></code></pre></td></tr></table></figure><p>我们也可以<code>[[</code>像这样使用双方括号：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">record[[<span class="hljs-string">&quot;student_id&quot;</span>]]<br><span class="hljs-comment">#&gt; [1] 1234</span><br></code></pre></td></tr></table></figure><p>在R中，通常有几种方法可以执行相同的操作。</p><p>没有变量名的列表：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">record2<br><span class="hljs-comment">#&gt; [[1]]</span><br><span class="hljs-comment">#&gt; [1] &quot;John Doe&quot;</span><br><span class="hljs-comment">#&gt; </span><br><span class="hljs-comment">#&gt; [[2]]</span><br><span class="hljs-comment">#&gt; [1] 1234</span><br></code></pre></td></tr></table></figure><p><strong>如果列表中没有名称，则不能使用来提取元素<code>$</code>，但仍可以使用方括号方法，并且可以提供列表索引，而不是提供变量名称</strong>，如下所示：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">record2[[<span class="hljs-number">1</span>]]<br><span class="hljs-comment">#&gt; [1] &quot;John Doe&quot;</span><br></code></pre></td></tr></table></figure><h3 id="七、矩阵"><a href="#七、矩阵" class="headerlink" title="七、矩阵"></a>七、矩阵</h3><p>矩阵是R中常见的另一种对象。矩阵与数据帧类似，因为它们是二维的：它们具有行和列。但是，像数字，字符和逻辑向量一样，矩阵中的条目必须全部为同一类型。</p><p>与数据帧相比，矩阵具有主要优势是可以执行矩阵代数运算。</p><p>使用<code>matrix</code>函数定义一个矩阵，指定行数和列数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">mat &lt;- matrix(<span class="hljs-number">1</span>:<span class="hljs-number">12</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>)<br>mat<br><span class="hljs-comment">#&gt;      [,1] [,2] [,3]</span><br><span class="hljs-comment">#&gt; [1,]    1    5    9</span><br><span class="hljs-comment">#&gt; [2,]    2    6   10</span><br><span class="hljs-comment">#&gt; [3,]    3    7   11</span><br><span class="hljs-comment">#&gt; [4,]    4    8   12</span><br></code></pre></td></tr></table></figure><p>可以使用方括号<code>[</code>访问矩阵中的特定条目。如果要第二行第三列，使用：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">mat[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><span class="hljs-comment">#&gt; [1] 10</span><br></code></pre></td></tr></table></figure><p>如果要整个第二行，则将列位置保留为空：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">mat[<span class="hljs-number">2</span>, ]<br><span class="hljs-comment">#&gt; [1]  2  6 10</span><br></code></pre></td></tr></table></figure><p>如果要整个第三列，行位置保留为空白：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">mat[, <span class="hljs-number">3</span>]<br><span class="hljs-comment">#&gt; [1]  9 10 11 12</span><br></code></pre></td></tr></table></figure><p>这也是一个向量，而不是矩阵。</p><p>访问多于一列或多于一行，返回一个新的矩阵。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">mat[, <span class="hljs-number">2</span>:<span class="hljs-number">3</span>]<br><span class="hljs-comment">#&gt;      [,1] [,2]</span><br><span class="hljs-comment">#&gt; [1,]    5    9</span><br><span class="hljs-comment">#&gt; [2,]    6   10</span><br><span class="hljs-comment">#&gt; [3,]    7   11</span><br><span class="hljs-comment">#&gt; [4,]    8   12</span><br></code></pre></td></tr></table></figure><p>将行和列都作为子集：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">mat[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>, <span class="hljs-number">2</span>:<span class="hljs-number">3</span>]<br><span class="hljs-comment">#&gt;      [,1] [,2]</span><br><span class="hljs-comment">#&gt; [1,]    5    9</span><br><span class="hljs-comment">#&gt; [2,]    6   10</span><br></code></pre></td></tr></table></figure><p>可以使用函数将矩阵转换为数据帧<code>as.data.frame</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">as.data.frame(mat)<br><span class="hljs-comment">#&gt;   V1 V2 V3</span><br><span class="hljs-comment">#&gt; 1  1  5  9</span><br><span class="hljs-comment">#&gt; 2  2  6 10</span><br><span class="hljs-comment">#&gt; 3  3  7 11</span><br><span class="hljs-comment">#&gt; 4  4  8 12</span><br></code></pre></td></tr></table></figure><p>可以使用单个方括号<code>[</code>访问数据帧的行和列：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">data(<span class="hljs-string">&quot;murders&quot;</span>)<br>murders[<span class="hljs-number">25</span>, <span class="hljs-number">1</span>]<br><span class="hljs-comment">#&gt; [1] &quot;Mississippi&quot;</span><br>murders[<span class="hljs-number">2</span>:<span class="hljs-number">3</span>, ]<br><span class="hljs-comment">#&gt;     state abb region population total</span><br><span class="hljs-comment">#&gt; 2  Alaska  AK   West     710231    19</span><br><span class="hljs-comment">#&gt; 3 Arizona  AZ   West    6392017   232</span><br></code></pre></td></tr></table></figure><h2 id="III-向量与强制"><a href="#III-向量与强制" class="headerlink" title="III 向量与强制"></a>III 向量与强制</h2><p>R中，可用于存储数据的最基本对象是<em>vector</em>。可以将复杂的数据集分解为向量的组成部分。例如，在数据帧中，每一列都是一个向量。</p><h3 id="一、创建向量"><a href="#一、创建向量" class="headerlink" title="一、创建向量"></a>一、创建向量</h3><p>我们可以使用<code>c</code>表示<em>串联</em>的函数创建向量。我们使用<code>c</code>以下方式连接条目：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">codes &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">380</span>, <span class="hljs-number">124</span>, <span class="hljs-number">818</span>)<br>codes<br><span class="hljs-comment">#&gt; [1] 380 124 818</span><br></code></pre></td></tr></table></figure><p>我们还可以创建字符向量。我们使用引号表示条目是字符而不是变量名。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">country &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;italy&quot;</span>, <span class="hljs-string">&quot;canada&quot;</span>, <span class="hljs-string">&quot;egypt&quot;</span>)<br></code></pre></td></tr></table></figure><p>在R中，也可以使用单引号：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">country &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&#x27;italy&#x27;</span>, <span class="hljs-string">&#x27;canada&#x27;</span>, <span class="hljs-string">&#x27;egypt&#x27;</span>)<br></code></pre></td></tr></table></figure><p>但是请注意不要将单引号’与<em>反引号</em> ` 混淆。</p><p>如果键入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">country &lt;- <span class="hljs-built_in">c</span>(italy, canada, egypt)<br></code></pre></td></tr></table></figure><p>会收到一个错误，因为变量<code>italy</code>，<code>canada</code>以及<code>egypt</code>没有定义。如果我们不使用引号，则R查找具有这些名称的变量并返回错误。</p><h3 id="二、名称"><a href="#二、名称" class="headerlink" title="二、名称"></a>二、名称</h3><p>有时，命名向量的条目很有用。例如，在定义国家/地区代码的向量时，我们可以使用名称将两者联系起来：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">codes &lt;- <span class="hljs-built_in">c</span>(italy = <span class="hljs-number">380</span>, canada = <span class="hljs-number">124</span>, egypt = <span class="hljs-number">818</span>)<br>codes<br><span class="hljs-comment">#&gt;  italy canada  egypt </span><br><span class="hljs-comment">#&gt;    380    124    818</span><br></code></pre></td></tr></table></figure><p>该对象<code>codes</code>仍然是数字矢量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(codes)<br><span class="hljs-comment">#&gt; [1] &quot;numeric&quot;</span><br></code></pre></td></tr></table></figure><p>但名称：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">names</span>(codes)<br><span class="hljs-comment">#&gt; [1] &quot;italy&quot;  &quot;canada&quot; &quot;egypt&quot;</span><br></code></pre></td></tr></table></figure><p>可以使用引号：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">codes &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;italy&quot;</span> = <span class="hljs-number">380</span>, <span class="hljs-string">&quot;canada&quot;</span> = <span class="hljs-number">124</span>, <span class="hljs-string">&quot;egypt&quot;</span> = <span class="hljs-number">818</span>)<br>codes<br><span class="hljs-comment">#&gt;  italy canada  egypt </span><br><span class="hljs-comment">#&gt;    380    124    818</span><br></code></pre></td></tr></table></figure><p>此函数调用与上一个函数没有区别。与其他语言相比，R是古怪的多种方式之一。</p><p>我们还可以使用以下<code>names</code>功能分配名称：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">codes &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">380</span>, <span class="hljs-number">124</span>, <span class="hljs-number">818</span>)<br>country &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;italy&quot;</span>,<span class="hljs-string">&quot;canada&quot;</span>,<span class="hljs-string">&quot;egypt&quot;</span>)<br><span class="hljs-built_in">names</span>(codes) &lt;- country<br>codes<br><span class="hljs-comment">#&gt;  italy canada  egypt </span><br><span class="hljs-comment">#&gt;    380    124    818</span><br></code></pre></td></tr></table></figure><h3 id="三、序列"><a href="#三、序列" class="headerlink" title="三、序列"></a>三、序列</h3><p>创建向量的另一个有用功能是生成序列：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">seq(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>)<br><span class="hljs-comment">#&gt;  [1]  1  2  3  4  5  6  7  8  9 10</span><br></code></pre></td></tr></table></figure><p>第一个参数定义开始，第二个参数定义结束。默认值以1为增量增加，但是第三个参数让我们告诉它要跳过多少：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">seq(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment">#&gt; [1] 1 3 5 7 9</span><br></code></pre></td></tr></table></figure><p>如果我们需要连续的整数，则可以使用以下速记：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">1:<span class="hljs-number">10</span><br><span class="hljs-comment">#&gt;  [1]  1  2  3  4  5  6  7  8  9 10</span><br></code></pre></td></tr></table></figure><p>当我们使用这些函数时，R生成整数而不是数字，因为它们通常用于索引某些内容：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(<span class="hljs-number">1</span>:<span class="hljs-number">10</span>)<br><span class="hljs-comment">#&gt; [1] &quot;integer&quot;</span><br></code></pre></td></tr></table></figure><p>但是，如果我们创建一个包含非整数的序列，则该类将更改：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(seq(<span class="hljs-number">1</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0.5</span>))<br><span class="hljs-comment">#&gt; [1] &quot;numeric&quot;</span><br></code></pre></td></tr></table></figure><h3 id="四、子集"><a href="#四、子集" class="headerlink" title="四、子集"></a>四、子集</h3><p>我们使用方括号来访问向量的特定元素。对于<code>codes</code>我们上面定义的向量，我们可以使用以下方法访问第二个元素：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">codes[<span class="hljs-number">2</span>]<br><span class="hljs-comment">#&gt; canada </span><br><span class="hljs-comment">#&gt;    124</span><br></code></pre></td></tr></table></figure><p>通过使用多条目向量作为索引，可以获得多个条目：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">codes[<span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)]<br><span class="hljs-comment">#&gt; italy egypt </span><br><span class="hljs-comment">#&gt;   380   818</span><br></code></pre></td></tr></table></figure><p>如果我们要访问例如前两个元素，则上面定义的序列特别有用：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">codes[<span class="hljs-number">1</span>:<span class="hljs-number">2</span>]<br><span class="hljs-comment">#&gt;  italy canada </span><br><span class="hljs-comment">#&gt;    380    124</span><br></code></pre></td></tr></table></figure><p>如果元素具有名称，我们也可以使用这些名称访问条目。以下是两个示例。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">codes[<span class="hljs-string">&quot;canada&quot;</span>]<br><span class="hljs-comment">#&gt; canada </span><br><span class="hljs-comment">#&gt;    124</span><br>codes[<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;egypt&quot;</span>,<span class="hljs-string">&quot;italy&quot;</span>)]<br><span class="hljs-comment">#&gt; egypt italy </span><br><span class="hljs-comment">#&gt;   818   380</span><br></code></pre></td></tr></table></figure><h3 id="五、强制"><a href="#五、强制" class="headerlink" title="五、强制"></a>五、强制</h3><p>通常，<em>强制</em>是R尝试灵活处理数据类型。</p><p>当某个条目与预期的不匹配时，一些预构建的R函数会在抛出错误之前尝试猜测其含义。这也可能导致混乱。</p><p>eg:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;canada&quot;</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>但是我们没有得到警告，看一下<code>x</code>的类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">x<br>#&gt; [1] &quot;1&quot;      &quot;canada&quot; &quot;3&quot;<br>class(x)<br>#&gt; [1] &quot;character&quot;<br></code></pre></td></tr></table></figure><p>R 将数据<em>强制</em>转换为字符。它猜测是因为在向量中放入了一个字符串，所以实际上将1和3当作字符串<code>&quot;1&quot;</code>和“ <code>3</code>”。</p><p>R还提供了从一种类型更改为另一种类型的功能。例如，可以使用以下方法将数字转换为字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">x &lt;- 1:5<br>y &lt;- as.character(x)<br>y<br>#&gt; [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot;<br></code></pre></td></tr></table></figure><p>可以使用<code>as.numeric</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">as.numeric(y)<br>#&gt; [1] 1 2 3 4 5<br></code></pre></td></tr></table></figure><p>该功能实际上非常有用，因为包含数字作为字符串的数据集是常见的。</p><p>当函数试图将一种类型强制转换为另一种类型并遇到不可能的情况时，它通常会向我们发出警告，并将该条目转换为一个特殊值，称为<code>NA</code>“不可用”。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">x &lt;- c(&quot;1&quot;, &quot;b&quot;, &quot;3&quot;)<br>as.numeric(x)<br>#&gt; Warning: NAs introduced by coercion<br>#&gt; [1]  1 NA  3<br></code></pre></td></tr></table></figure><p>当输入时<code>b</code>，R不会对想要的数字有任何猜测，因此不会尝试。</p><p>经常会遇到<code>NA</code>，因为它们通常用于丢失数据，这是现实数据集中的常见问题。</p><h2 id="IV-排序"><a href="#IV-排序" class="headerlink" title="IV 排序"></a>IV 排序</h2><h3 id="一、-sort"><a href="#一、-sort" class="headerlink" title="一、 sort"></a>一、 <code>sort</code></h3><p>函数<code>sort</code>按升序对向量进行排序。因此，通过键入以下内容，可以看到最多的枪杀案：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">library(dslabs)<br>data(murders)<br>sort(murders$total)<br><span class="hljs-comment">#&gt;  [1]    2    4    5    5    7    8   11   12   12   16   19   21   22</span><br><span class="hljs-comment">#&gt; [14]   27   32   36   38   53   63   65   67   84   93   93   97   97</span><br><span class="hljs-comment">#&gt; [27]   99  111  116  118  120  135  142  207  219  232  246  250  286</span><br><span class="hljs-comment">#&gt; [40]  293  310  321  351  364  376  413  457  517  669  805 1257</span><br></code></pre></td></tr></table></figure><p>但是，这并不能为我们提供有关哪个州共有哪些谋杀案的信息。例如，我们不知道哪个州拥有1257。</p><h3 id="二、order"><a href="#二、order" class="headerlink" title="二、order"></a>二、<code>order</code></h3><p>功能<code>order</code>更接近我们想要的。它以向量为输入，并返回对输入向量进行排序的索引向量。这听起来可能令人困惑，所以让我们看一个简单的例子。我们可以创建一个向量并将其排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">x &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">31</span>, <span class="hljs-number">4</span>, <span class="hljs-number">15</span>, <span class="hljs-number">92</span>, <span class="hljs-number">65</span>)<br>sort(x)<br><span class="hljs-comment">#&gt; [1]  4 15 31 65 92</span><br></code></pre></td></tr></table></figure><p>该函数<code>order</code>返回对输入向量进行排序的索引，而不是对输入向量进行排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">index &lt;- order(x)<br>x[index]<br><span class="hljs-comment">#&gt; [1]  4 15 31 65 92</span><br></code></pre></td></tr></table></figure><p>这与所返回的输出相同<code>sort(x)</code>。如果我们看一下这个索引，就会明白它为什么起作用：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">x<br><span class="hljs-comment">#&gt; [1] 31  4 15 92 65</span><br>order(x)<br><span class="hljs-comment">#&gt; [1] 2 3 1 5 4</span><br></code></pre></td></tr></table></figure><p>这如何帮助我们通过谋杀来命令各州？首先，请记住，您访问的向量的条目与<code>$</code>表中的行遵循相同的顺序。例如，这两个分别包含状态名称和缩写的向量按其顺序匹配：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">murders$state[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>]<br><span class="hljs-comment">#&gt; [1] &quot;Alabama&quot;    &quot;Alaska&quot;     &quot;Arizona&quot;    &quot;Arkansas&quot;   &quot;California&quot;</span><br><span class="hljs-comment">#&gt; [6] &quot;Colorado&quot;</span><br>murders$abb[<span class="hljs-number">1</span>:<span class="hljs-number">6</span>]<br><span class="hljs-comment">#&gt; [1] &quot;AL&quot; &quot;AK&quot; &quot;AZ&quot; &quot;AR&quot; &quot;CA&quot; &quot;CO&quot;</span><br></code></pre></td></tr></table></figure><p>这意味着我们可以根据他们的谋杀总数来对州名进行排序。我们首先获得根据谋杀总数对向量进行排序的索引，然后对状态名称向量进行索引：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">ind &lt;- order(murders$total) <br>murders$abb[ind] <br><span class="hljs-comment">#&gt;  [1] &quot;VT&quot; &quot;ND&quot; &quot;NH&quot; &quot;WY&quot; &quot;HI&quot; &quot;SD&quot; &quot;ME&quot; &quot;ID&quot; &quot;MT&quot; &quot;RI&quot; &quot;AK&quot; &quot;IA&quot; &quot;UT&quot;</span><br><span class="hljs-comment">#&gt; [14] &quot;WV&quot; &quot;NE&quot; &quot;OR&quot; &quot;DE&quot; &quot;MN&quot; &quot;KS&quot; &quot;CO&quot; &quot;NM&quot; &quot;NV&quot; &quot;AR&quot; &quot;WA&quot; &quot;CT&quot; &quot;WI&quot;</span><br><span class="hljs-comment">#&gt; [27] &quot;DC&quot; &quot;OK&quot; &quot;KY&quot; &quot;MA&quot; &quot;MS&quot; &quot;AL&quot; &quot;IN&quot; &quot;SC&quot; &quot;TN&quot; &quot;AZ&quot; &quot;NJ&quot; &quot;VA&quot; &quot;NC&quot;</span><br><span class="hljs-comment">#&gt; [40] &quot;MD&quot; &quot;OH&quot; &quot;MO&quot; &quot;LA&quot; &quot;IL&quot; &quot;GA&quot; &quot;MI&quot; &quot;PA&quot; &quot;NY&quot; &quot;FL&quot; &quot;TX&quot; &quot;CA&quot;</span><br></code></pre></td></tr></table></figure><p>根据以上所述，加州谋杀案最多。</p><h3 id="三、-max和which-max"><a href="#三、-max和which-max" class="headerlink" title="三、 max和which.max"></a>三、 <code>max</code>和<code>which.max</code></h3><p>如果我们只对值最大的条目感兴趣，则可以使用<code>max</code>该值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">max</span>(murders$total)<br><span class="hljs-comment">#&gt; [1] 1257</span><br></code></pre></td></tr></table></figure><p>而<code>which.max</code>对于最大价值的指标：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">i_max &lt;- which.max(murders$total)<br>murders$state[i_max]<br><span class="hljs-comment">#&gt; [1] &quot;California&quot;</span><br></code></pre></td></tr></table></figure><p>可以以相同的方式使用<code>min</code>和<code>which.min</code>。</p><h3 id="四、rank"><a href="#四、rank" class="headerlink" title="四、rank"></a>四、<code>rank</code></h3><p><code>rank</code>与顺序有关，对于任何给定的向量，它返回一个具有输入向量的第一项，第二项等的排序的向量。</p><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">x &lt;- c(31, 4, 15, 92, 65)<br>rank(x)<br>#&gt; [1] 3 1 2 5 4<br></code></pre></td></tr></table></figure><h3 id="五、回收"><a href="#五、回收" class="headerlink" title="五、回收"></a>五、回收</h3><p>R中未注意到的错误的另一个常见来源是<em>回收</em>的使用。向量是逐元素相加的。因此，如果向量的长度不匹配，应该得到一个错误。但是我们没有。注意发生了什么：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">x &lt;- c(1,2,3)<br>y &lt;- c(10, 20, 30, 40, 50, 60, 70)<br>x+y<br>#&gt; Warning in x + y: longer object length is not a multiple of shorter<br>#&gt; object length<br>#&gt; [1] 11 22 33 41 52 63 71<br></code></pre></td></tr></table></figure><p>我们确实收到警告，但没有错误。对于输出，R回收了中的数字<code>x</code>。注意输出中数字的最后一位。</p><h2 id="V-数学运算"><a href="#V-数学运算" class="headerlink" title="V 数学运算"></a>V 数学运算</h2><h3 id="一、重新缩放向量"><a href="#一、重新缩放向量" class="headerlink" title="一、重新缩放向量"></a>一、重新缩放向量</h3><p>在R中，对向量的算术运算按<em>元素进行</em>。举个简单的例子，假设我们的高度以英寸为单位：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">inches &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">69</span>, <span class="hljs-number">62</span>, <span class="hljs-number">66</span>, <span class="hljs-number">70</span>, <span class="hljs-number">70</span>, <span class="hljs-number">73</span>, <span class="hljs-number">67</span>, <span class="hljs-number">73</span>, <span class="hljs-number">67</span>, <span class="hljs-number">70</span>)<br></code></pre></td></tr></table></figure><p>转换为厘米，即<code>inches</code>乘以2.54：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">inches * <span class="hljs-number">2.54</span><br><span class="hljs-comment">#&gt;  [1] 175 157 168 178 178 185 170 185 170 178</span><br></code></pre></td></tr></table></figure><p>为每个条目计算男性的平均身高高出或短于69英寸的长度，则可以从每个条目中减去它：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">inches - <span class="hljs-number">69</span><br><span class="hljs-comment">#&gt;  [1]  0 -7 -3  1  1  4 -2  4 -2  1</span><br></code></pre></td></tr></table></figure><h3 id="二、双向量运算"><a href="#二、双向量运算" class="headerlink" title="二、双向量运算"></a>二、双向量运算</h3><p>如果我们有两个长度相同的向量，并在R中将它们求和，则将它们逐项相加，如下所示：</p><p>这意味着要计算谋杀率，我们可以简单地输入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">murder_rate &lt;- murders$total / murders$population * <span class="hljs-number">100000</span><br></code></pre></td></tr></table></figure><p>完成此操作后，我们会注意到加利福尼亚不再位于列表的顶部。实际上，我们可以利用我们所学的知识以谋杀率对各州进行排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">murders$abb[order(murder_rate)]<br><span class="hljs-comment">#&gt;  [1] &quot;VT&quot; &quot;NH&quot; &quot;HI&quot; &quot;ND&quot; &quot;IA&quot; &quot;ID&quot; &quot;UT&quot; &quot;ME&quot; &quot;WY&quot; &quot;OR&quot; &quot;SD&quot; &quot;MN&quot; &quot;MT&quot;</span><br><span class="hljs-comment">#&gt; [14] &quot;CO&quot; &quot;WA&quot; &quot;WV&quot; &quot;RI&quot; &quot;WI&quot; &quot;NE&quot; &quot;MA&quot; &quot;IN&quot; &quot;KS&quot; &quot;NY&quot; &quot;KY&quot; &quot;AK&quot; &quot;OH&quot;</span><br><span class="hljs-comment">#&gt; [27] &quot;CT&quot; &quot;NJ&quot; &quot;AL&quot; &quot;IL&quot; &quot;OK&quot; &quot;NC&quot; &quot;NV&quot; &quot;VA&quot; &quot;AR&quot; &quot;TX&quot; &quot;NM&quot; &quot;CA&quot; &quot;FL&quot;</span><br><span class="hljs-comment">#&gt; [40] &quot;TN&quot; &quot;PA&quot; &quot;AZ&quot; &quot;GA&quot; &quot;MS&quot; &quot;MI&quot; &quot;DE&quot; &quot;SC&quot; &quot;MD&quot; &quot;MO&quot; &quot;LA&quot; &quot;DC&quot;</span><br></code></pre></td></tr></table></figure><h2 id="VI-索引"><a href="#VI-索引" class="headerlink" title="VI 索引"></a><p align="center">VI 索引</p><p></p></h2><p>R提供了一种强大而便捷的索引向量的方式。例如，我们可以根据另一个向量的属性对向量进行子集化，即加载：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">library(dslabs)<br>data(<span class="hljs-string">&quot;murders&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="一、用逻辑子集"><a href="#一、用逻辑子集" class="headerlink" title="一、用逻辑子集"></a>一、用逻辑子集</h3><p>使用以下方法计算谋杀率：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">murder_rate &lt;- murders$total / murders$population * <span class="hljs-number">100000</span> <br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">ind &lt;- murder_rate &lt; <span class="hljs-number">0.71</span><br></code></pre></td></tr></table></figure><p>如果想知道某个值是小于还是等于，则可以使用：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">ind &lt;- murder_rate &lt;= <span class="hljs-number">0.71</span><br></code></pre></td></tr></table></figure><p><code>TRUE</code>对于每个条目返回的逻辑向量均小于或等于0.71。为了查看这些状态，可以用逻辑索引。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">murders$state[ind]<br><span class="hljs-comment">#&gt; [1] &quot;Hawaii&quot;        &quot;Iowa&quot;          &quot;New Hampshire&quot; &quot;North Dakota&quot; </span><br><span class="hljs-comment">#&gt; [5] &quot;Vermont&quot;</span><br></code></pre></td></tr></table></figure><p>为了计算有多少是TRUE，函数<code>sum</code>返回向量的项之和，逻辑向量被<em>强制转换</em>为数字，<code>TRUE</code>并被编码为1和<code>FALSE</code>0。对状态进行计数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">sum</span>(ind)<br><span class="hljs-comment">#&gt; [1] 5</span><br></code></pre></td></tr></table></figure><h3 id="二、逻辑运算符"><a href="#二、逻辑运算符" class="headerlink" title="二、逻辑运算符"></a>二、逻辑运算符</h3><p>假设我们喜欢高山，并且想要迁移到该国安全的西部地区。我们希望谋杀率最高为1。在这种情况下，有两种不同的说法是正确的，可以使用逻辑运算符<em>and</em>，它在R中用表示<code>&amp;</code>。<code>TRUE</code>仅当两个逻辑均为时，此操作才会产生<code>TRUE</code>。</p><p>eg:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-literal">TRUE</span> &amp; <span class="hljs-literal">TRUE</span><br><span class="hljs-comment">#&gt; [1] TRUE</span><br><span class="hljs-literal">TRUE</span> &amp; <span class="hljs-literal">FALSE</span><br><span class="hljs-comment">#&gt; [1] FALSE</span><br><span class="hljs-literal">FALSE</span> &amp; <span class="hljs-literal">FALSE</span><br><span class="hljs-comment">#&gt; [1] FALSE</span><br></code></pre></td></tr></table></figure><p>可以形成两种逻辑：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">west &lt;- murders$region == <span class="hljs-string">&quot;West&quot;</span><br>safe &lt;- murder_rate &lt;= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>并且使用<code>&amp;</code>来获得逻辑向量，告诉我们哪些状态满足两个条件：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">ind &lt;- safe &amp; west<br>murders$state[ind]<br><span class="hljs-comment">#&gt; [1] &quot;Hawaii&quot;  &quot;Idaho&quot;   &quot;Oregon&quot;  &quot;Utah&quot;    &quot;Wyoming&quot;</span><br></code></pre></td></tr></table></figure><h3 id="三、-which"><a href="#三、-which" class="headerlink" title="三、 which"></a>三、 <code>which</code></h3><p>假设要查询加利福尼亚的谋杀率。对于这种类型的操作，将逻辑向量转换成索引很方便，而不是保留逻辑的长向量。函数<code>which</code>告诉我们逻辑向量的哪些条目为TRUE。所以可以输入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">ind &lt;- which(murders$state == <span class="hljs-string">&quot;California&quot;</span>)<br>murder_rate[ind]<br><span class="hljs-comment">#&gt; [1] 3.37</span><br></code></pre></td></tr></table></figure><h3 id="四、match"><a href="#四、match" class="headerlink" title="四、match"></a>四、<code>match</code></h3><p>如果我们要找出纽约，佛罗里达州和德克萨斯州等多个州的谋杀率，而不仅仅是一个州，则可以使用该函数<code>match</code>。此函数告诉我们第二个向量的哪些索引与第一个向量的每个条目匹配：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">ind &lt;- match(<span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;New York&quot;</span>, <span class="hljs-string">&quot;Florida&quot;</span>, <span class="hljs-string">&quot;Texas&quot;</span>), murders$state)<br>ind<br><span class="hljs-comment">#&gt; [1] 33 10 44</span><br></code></pre></td></tr></table></figure><p>现在我们来看看谋杀率：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">murder_rate[ind]<br><span class="hljs-comment">#&gt; [1] 2.67 3.40 3.20</span><br></code></pre></td></tr></table></figure><h3 id="五-in"><a href="#五-in" class="headerlink" title="五 %in%"></a>五 <code>%in%</code></h3><p>如果我们想要一个逻辑而不是索引来告诉我们第一个向量的每个元素是否在第二个元素中，那么我们可以使用函数<code>%in%</code>。如果不确定波士顿，达科他州和华盛顿州是否为州，则可以这样查找：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;Boston&quot;</span>, <span class="hljs-string">&quot;Dakota&quot;</span>, <span class="hljs-string">&quot;Washington&quot;</span>) %in% murders$state<br><span class="hljs-comment">#&gt; [1] FALSE FALSE  TRUE</span><br></code></pre></td></tr></table></figure><h2 id="VII-基本语法"><a href="#VII-基本语法" class="headerlink" title="VII 基本语法"></a>VII 基本语法</h2><h3 id="一、条件表达式"><a href="#一、条件表达式" class="headerlink" title="一、条件表达式"></a>一、条件表达式</h3><p>条件表达式是编程的基本功能之一。</p><p>这是一个非常简单的示例，显示了if-else语句的一般结构。基本思想是打印除0以外<code>a</code>的倒数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">a &lt;- 0<br><br><span class="hljs-keyword">if</span>(a!=<span class="hljs-number">0</span>)&#123;<br>  print(<span class="hljs-number">1</span>/a)<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>  print(<span class="hljs-string">&quot;No reciprocal for 0.&quot;</span>)<br>&#125;<br><span class="hljs-comment">#&gt; [1] &quot;No reciprocal for 0.&quot;</span><br></code></pre></td></tr></table></figure><p>让我们再看一个使用美国谋杀数据框架的示例：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">library(dslabs)<br>data(murders)<br>murder_rate &lt;- murders$total / murders$population*<span class="hljs-number">100000</span><br></code></pre></td></tr></table></figure><p>这是一个非常简单的例子，告诉我们哪个州的谋杀率低于每十万分之0.5。该<code>if</code>语句排除了任何国家都不满足该条件的情况。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">ind &lt;- which.min(murder_rate)<br><br><span class="hljs-keyword">if</span>(murder_rate[ind] &lt; <span class="hljs-number">0.5</span>)&#123;<br>  print(murders$state[ind]) <br>&#125; <span class="hljs-keyword">else</span>&#123;<br>  print(<span class="hljs-string">&quot;No state has murder rate that low&quot;</span>)<br>&#125;<br><span class="hljs-comment">#&gt; [1] &quot;Vermont&quot;</span><br></code></pre></td></tr></table></figure><p>如果我们以0.25的速率再次尝试，则会得到不同的答案：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-keyword">if</span>(murder_rate[ind] &lt; <span class="hljs-number">0.25</span>)&#123;<br>  print(murders$state[ind]) <br>&#125; <span class="hljs-keyword">else</span>&#123;<br>  print(<span class="hljs-string">&quot;No state has a murder rate that low.&quot;</span>)<br>&#125;<br><span class="hljs-comment">#&gt; [1] &quot;No state has a murder rate that low.&quot;</span><br></code></pre></td></tr></table></figure><p>一个非常有用的相关功能是<code>ifelse</code>。此函数采用三个参数：逻辑和两个可能的答案。如果逻辑为<code>TRUE</code>，则返回第二个参数的值，如果为<code>FALSE</code>，则返回第三个参数的值。比如 ：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">a &lt;- 0<br>ifelse(a &gt; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>/a, <span class="hljs-literal">NA</span>)<br><span class="hljs-comment">#&gt; [1] NA</span><br></code></pre></td></tr></table></figure><p>该函数适用于矢量，它检查逻辑向量的每个条目，如果条目为<code>TRUE</code>，则返回第二个自变量提供的向量中的元素，如果条目为<code>FALSE</code>，则返回第三个自变量提供的向量中的元素。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">a &lt;- <span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">4</span>, <span class="hljs-number">5</span>)<br>result &lt;- ifelse(a &gt; <span class="hljs-number">0</span>, <span class="hljs-number">1</span>/a, <span class="hljs-literal">NA</span>)<br></code></pre></td></tr></table></figure><h3 id="二、定义函数"><a href="#二、定义函数" class="headerlink" title="二、定义函数"></a>二、定义函数</h3><p>函数不存在的情况，R允许编写自己的函数。比如定义一个简单的计算平均值的函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">avg &lt;- <span class="hljs-keyword">function</span>(x)&#123;<br>  s &lt;- <span class="hljs-built_in">sum</span>(x)<br>  n &lt;- <span class="hljs-built_in">length</span>(x)<br>  s/n<br>&#125;<br></code></pre></td></tr></table></figure><p>现在<code>avg</code>是一个计算均值的函数：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">x &lt;- 1:<span class="hljs-number">100</span><br>identical(mean(x), avg(x))<br><span class="hljs-comment">#&gt; [1] TRUE</span><br></code></pre></td></tr></table></figure><p>在函数内部定义的变量不会保存在工作空间中。因此，在使用<code>s</code>和<code>n</code>调用时<code>avg</code>，仅在调用期间创建和更改值。比如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">s &lt;- 3<br>avg(<span class="hljs-number">1</span>:<span class="hljs-number">10</span>)<br><span class="hljs-comment">#&gt; [1] 5.5</span><br>s<br><span class="hljs-comment">#&gt; [1] 3</span><br></code></pre></td></tr></table></figure><p>通常，函数是对象，因此我们使用<code>&lt;-</code>给它们分配变量名。该函数<code>function</code>告诉R您将要定义一个函数。函数定义的一般形式如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">my_function &lt;- <span class="hljs-keyword">function</span>(VARIABLE_NAME)&#123;<br>  perform operations on VARIABLE_NAME and calculate VALUE<br>  VALUE<br>&#125;<br></code></pre></td></tr></table></figure><p>被定义的函数可以具有多个参数以及默认值。例如，我们可以定义一个函数，该函数根据用户定义的变量来计算算术平均值或几何平均值，如下所示：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">avg &lt;- <span class="hljs-keyword">function</span>(x, arithmetic = <span class="hljs-literal">TRUE</span>)&#123;<br>  n &lt;- <span class="hljs-built_in">length</span>(x)<br>  ifelse(arithmetic, <span class="hljs-built_in">sum</span>(x)/n, <span class="hljs-built_in">prod</span>(x)^(<span class="hljs-number">1</span>/n))<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三、命名空间"><a href="#三、命名空间" class="headerlink" title="三、命名空间"></a>三、命名空间</h3><p>两个软件包可能对两个不同的函数使用相同的名称。通常，这些函数会做完全不同的事情。</p><p>eg：<strong>dplyr</strong>和R-base <strong>stats</strong>包都定义了一个<code>filter</code>函数。<strong>dplyr中</strong>还有其他五个例子。之所以知道这一点，是因为当我们第一次加载<strong>dplyr时</strong>，会看到以下消息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">The following objects are masked from ‘package:stats’:<br><br>    filter, lag<br><br>The following objects are masked from ‘package:base’:<br><br>    intersect, setdiff, setequal, union<br></code></pre></td></tr></table></figure><p>那么当我们键入时R会做什么<code>filter</code>？它使用<strong>dplyr</strong>函数还是<strong>stats</strong>函数？从我们以前的工作中，我们知道它使用了<strong>dplyr</strong>。但是，如果我们要使用<strong>统计信息</strong>版本怎么办？</p><p>这些函数位于不同的<em>名称空间中</em>。在这些<em>命名空间中</em>搜索函数时，R将遵循特定顺序。可以通过键入以下命令查看：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">search()<br></code></pre></td></tr></table></figure><p>此列表中的第一项是全局环境，其中包括您定义的所有对象。</p><p>那么，如果我们要使用<strong>统计信息</strong> <code>filter</code>而不是<strong>dplyr</strong>过滤器，但如果<strong>dplyr</strong>出现在搜索列表的第一位，可以使用双冒号（<code>::</code>）强制使用特定的名称空间，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">stats::filter<br></code></pre></td></tr></table></figure><p>如果我们要绝对确定使用<strong>dplyr</strong> <code>filter</code>，则可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">dplyr::filter<br></code></pre></td></tr></table></figure><p>如果要在包中使用函数而不加载整个包，也可以使用双冒号。</p><h3 id="四、For循环"><a href="#四、For循环" class="headerlink" title="四、For循环"></a>四、For循环</h3><p>如果不确定是否调用了正确的函数，可以创建一个计算函数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">compute_s_n &lt;- function(n)&#123;<br>  x &lt;- 1:n<br>  sum(x)<br>&#125;<br></code></pre></td></tr></table></figure><p>for循环示例：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> <span class="hljs-number">1</span>:<span class="hljs-number">5</span>)&#123;<br>  print(i)<br>&#125;<br><span class="hljs-comment">#&gt; [1] 1</span><br><span class="hljs-comment">#&gt; [1] 2</span><br><span class="hljs-comment">#&gt; [1] 3</span><br><span class="hljs-comment">#&gt; [1] 4</span><br><span class="hljs-comment">#&gt; [1] 5</span><br></code></pre></td></tr></table></figure><h3 id="五、向量化和函数"><a href="#五、向量化和函数" class="headerlink" title="五、向量化和函数"></a>五、向量化和函数</h3><p><em>向量化</em>比for循环更可取，因为它可以使代码更短，更清晰。我们已经在矢量算术部分中看到了示例。矢量函数是将适用于每个矢量的相同的操作的函数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">x &lt;- 1:<span class="hljs-number">10</span><br><span class="hljs-built_in">sqrt</span>(x)<br><span class="hljs-comment">#&gt;  [1] 1.00 1.41 1.73 2.00 2.24 2.45 2.65 2.83 3.00 3.16</span><br>y &lt;- 1:<span class="hljs-number">10</span><br>x*y<br><span class="hljs-comment">#&gt;  [1]   1   4   9  16  25  36  49  64  81 100</span><br></code></pre></td></tr></table></figure><p>为了进行此计算，不需要for循环。但是，并非所有函数都以这种方式工作。例如，刚刚编写的函数<code>compute_s_n</code>由于它期望标量，因此无法逐个元素地工作。这段代码并未在以下各项的每个条目上运行该函数<code>n</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">n &lt;- 1:<span class="hljs-number">25</span><br>compute_s_n(n)<br></code></pre></td></tr></table></figure><p><em>函数</em>是可以帮助我们将相同函数应用于向量，矩阵，数据框或列表中的每个条目的函数。在这里，我们介绍了对数字，逻辑和字符向量进行操作的函数：<code>sapply</code>。</p><p>该函数<code>sapply</code>允许我们对任何函数执行按元素操作。下面是它的工作原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">x &lt;- 1:10<br>sapply(x, sqrt)<br>#&gt;  [1] 1.00 1.41 1.73 2.00 2.24 2.45 2.65 2.83 3.00 3.16<br></code></pre></td></tr></table></figure><p>的每个元素<code>x</code>都传递给函数，<code>sqrt</code>并返回结果。这些结果是串联的。在这种情况下，结果是一个与原始长度相同的向量<code>x</code>。这意味着上面的for循环可以编写如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">n &lt;- 1:25<br>s_n &lt;- sapply(n, compute_s_n)<br></code></pre></td></tr></table></figure><p>其他泛函也包括<code>apply</code>，<code>lapply</code>，<code>tapply</code>，<code>mapply</code>，<code>vapply</code>，和<code>replicate</code>。</p><h2 id="VIII-idyverse"><a href="#VIII-idyverse" class="headerlink" title="VIII idyverse"></a>VIII idyverse</h2><p>数据存储的首选单位不是矢量，而是数据帧。</p><p>通过安装和加载tidyverse软件包来一次加载所有<strong>tidyverse</strong>软件包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">library(tidyverse)<br></code></pre></td></tr></table></figure><h3 id="一、整理数据"><a href="#一、整理数据" class="headerlink" title="一、整理数据"></a>一、整理数据</h3><p>每一行代表一个观察值，而各列代表可用于这些观察值的不同变量，则数据表为<em>整齐的</em>格式。该<code>murders</code>数据集为整齐的数据帧的一个例子。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment">#&gt;        state abb region population total</span><br><span class="hljs-comment">#&gt; 1    Alabama  AL  South    4779736   135</span><br><span class="hljs-comment">#&gt; 2     Alaska  AK   West     710231    19</span><br><span class="hljs-comment">#&gt; 3    Arizona  AZ   West    6392017   232</span><br><span class="hljs-comment">#&gt; 4   Arkansas  AR  South    2915918    93</span><br><span class="hljs-comment">#&gt; 5 California  CA   West   37253956  1257</span><br><span class="hljs-comment">#&gt; 6   Colorado  CO   West    5029196    65</span><br></code></pre></td></tr></table></figure><p>每一行代表一个州，五列中的每一列都提供与这些州相关的不同变量：名称，缩写，地区，人口和谋杀总数。</p><p>以不同的格式提供相同的信息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment">#&gt;       country year fertility</span><br><span class="hljs-comment">#&gt; 1     Germany 1960      2.41</span><br><span class="hljs-comment">#&gt; 2 South Korea 1960      6.16</span><br><span class="hljs-comment">#&gt; 3     Germany 1961      2.44</span><br><span class="hljs-comment">#&gt; 4 South Korea 1961      5.99</span><br><span class="hljs-comment">#&gt; 5     Germany 1962      2.47</span><br><span class="hljs-comment">#&gt; 6 South Korea 1962      5.79</span><br></code></pre></td></tr></table></figure><p>这个整齐的数据集提供了多年来两个国家的生育率。这是一个整洁的数据集，因为每一行都显示一个观察值，其中三个变量分别是国家/地区，年份和生育率：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-comment">#&gt;       country 1960 1961 1962</span><br><span class="hljs-comment">#&gt; 1     Germany 2.41 2.44 2.47</span><br><span class="hljs-comment">#&gt; 2 South Korea 6.16 5.99 5.79</span><br></code></pre></td></tr></table></figure><p>提供的信息相同，但是格式有两个重要区别：1）每行包含多个观测值； 2）变量之一year储存在标题中。为了使tidyverse软件包得到最佳使用，需要将数据重塑为<code>tidy</code>格式。</p><h3 id="二、处理数据帧"><a href="#二、处理数据帧" class="headerlink" title="二、处理数据帧"></a>二、处理数据帧</h3><p>要通过添加新列来更改数据表，使用<code>mutate</code>。</p><p>要将数据表过滤为行的子集，使用<code>filter</code>。</p><p>要选择特定列以对数据进行子集化，使用<code>select</code>。</p><h4 id="1、使用添加列mutate"><a href="#1、使用添加列mutate" class="headerlink" title="1、使用添加列mutate"></a>1、使用添加列<code>mutate</code></h4><p>函数<code>mutate</code>使用约定将数据帧作为第一个参数，并将变量的名称和值作为第二个参数<code>name = values</code>。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">library(dslabs)<br>data(<span class="hljs-string">&quot;murders&quot;</span>)<br>murders &lt;- mutate(murders, rate = total / population * <span class="hljs-number">100000</span>)<br></code></pre></td></tr></table></figure><p><strong>dplyr</strong>的主要功能之一：该软件包中的函数（例如<code>mutate</code>）知道要在第一个参数提供的数据框中查找变量（population和total）。</p><p>我们可以看到添加了新列：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">head(murders)<br><span class="hljs-comment">#&gt;        state abb region population total rate</span><br><span class="hljs-comment">#&gt; 1    Alabama  AL  South    4779736   135 2.82</span><br><span class="hljs-comment">#&gt; 2     Alaska  AK   West     710231    19 2.68</span><br><span class="hljs-comment">#&gt; 3    Arizona  AZ   West    6392017   232 3.63</span><br><span class="hljs-comment">#&gt; 4   Arkansas  AR  South    2915918    93 3.19</span><br><span class="hljs-comment">#&gt; 5 California  CA   West   37253956  1257 3.37</span><br><span class="hljs-comment">#&gt; 6   Colorado  CO   West    5029196    65 1.29</span><br></code></pre></td></tr></table></figure><p>尽管已经覆盖了原始<code>murders</code>对象，但不会更改加载的对象<code>data(murders)</code>。如果我们<code>murders</code>再次加载数据，原始数据将覆盖我们的变异版本。</p><h4 id="2、子集filter"><a href="#2、子集filter" class="headerlink" title="2、子集filter"></a>2、子集<code>filter</code></h4><p><code>filter</code>函数将数据表作为第一个参数，然后将条件语句作为第二个参数</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">filter(murders, rate &lt;= <span class="hljs-number">0.71</span>)<br><span class="hljs-comment">#&gt;           state abb        region population total  rate</span><br><span class="hljs-comment">#&gt; 1        Hawaii  HI          West    1360301     7 0.515</span><br><span class="hljs-comment">#&gt; 2          Iowa  IA North Central    3046355    21 0.689</span><br><span class="hljs-comment">#&gt; 3 New Hampshire  NH     Northeast    1316470     5 0.380</span><br><span class="hljs-comment">#&gt; 4  North Dakota  ND North Central     672591     4 0.595</span><br><span class="hljs-comment">#&gt; 5       Vermont  VT     Northeast     625741     2 0.320</span><br></code></pre></td></tr></table></figure><h4 id="3、select"><a href="#3、select" class="headerlink" title="3、select"></a>3、<code>select</code></h4><p>使用<strong>dplyr</strong> <code>select</code>函数查看其中几列：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">new_table &lt;- select(murders, state, region, rate)<br>filter(new_table, rate &lt;= <span class="hljs-number">0.71</span>)<br><span class="hljs-comment">#&gt;           state        region  rate</span><br><span class="hljs-comment">#&gt; 1        Hawaii          West 0.515</span><br><span class="hljs-comment">#&gt; 2          Iowa North Central 0.689</span><br><span class="hljs-comment">#&gt; 3 New Hampshire     Northeast 0.380</span><br><span class="hljs-comment">#&gt; 4  North Dakota North Central 0.595</span><br><span class="hljs-comment">#&gt; 5       Vermont     Northeast 0.320</span><br></code></pre></td></tr></table></figure><h3 id="三、管道：-gt"><a href="#三、管道：-gt" class="headerlink" title="三、管道：%&gt;%"></a>三、管道：<code>%&gt;%</code></h3><p>发送一个函数的结果到另一个，使用管道：<code>%&gt;%</code>。</p><p>原始数据 →  选择 →  过滤 original data → select → filter </p><p>对于这样的操作，我们可以使用pipe <code>%&gt;%</code>。代码如下：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;% select(state, region, rate) %&gt;% filter(rate &lt;= <span class="hljs-number">0.71</span>)<br><span class="hljs-comment">#&gt;           state        region  rate</span><br><span class="hljs-comment">#&gt; 1        Hawaii          West 0.515</span><br><span class="hljs-comment">#&gt; 2          Iowa North Central 0.689</span><br><span class="hljs-comment">#&gt; 3 New Hampshire     Northeast 0.380</span><br><span class="hljs-comment">#&gt; 4  North Dakota North Central 0.595</span><br><span class="hljs-comment">#&gt; 5       Vermont     Northeast 0.320</span><br></code></pre></td></tr></table></figure><p>管道<em>将</em>管道左侧的结果<em>发送</em>为管道右侧函数的第一个参数。</p><p>eg：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">16 %&gt;% <span class="hljs-built_in">sqrt</span>()<br><span class="hljs-comment">#&gt; [1] 4</span><br></code></pre></td></tr></table></figure><p>继续通过以下方式传递值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">16 %&gt;% <span class="hljs-built_in">sqrt</span>() %&gt;% log2()<br><span class="hljs-comment">#&gt; [1] 2</span><br></code></pre></td></tr></table></figure><p>以上声明等同于<code>log2(sqrt(16))</code>。</p><p>可以定义其他参数，而第一个参数已经定义：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">16 %&gt;% <span class="hljs-built_in">sqrt</span>() %&gt;% <span class="hljs-built_in">log</span>(base = <span class="hljs-number">2</span>)<br><span class="hljs-comment">#&gt; [1] 2</span><br></code></pre></td></tr></table></figure><p>当使用带有数据帧和<strong>dplyr</strong>的管道时，不再需要指定所需的第一个参数，因为<strong>dplyr</strong>函数都将数据作为第一个参数。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;% select(state, region, rate) %&gt;% filter(rate &lt;= <span class="hljs-number">0.71</span>)<br></code></pre></td></tr></table></figure><h3 id="四、汇总数据"><a href="#四、汇总数据" class="headerlink" title="四、汇总数据"></a>四、汇总数据</h3><h4 id="1、-summarize"><a href="#1、-summarize" class="headerlink" title="1、 summarize"></a>1、 <code>summarize</code></h4><p><strong>dplyr中</strong>的<code>summarize</code>函数可以计算摘要统计信息。</p><p>eg：从一个基于高度的简单示例开始。该数据集包括学生在课堂调查中报告的身高和性别。<code>heights</code></p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">library(dplyr)<br>library(dslabs)<br>data(heights)<br></code></pre></td></tr></table></figure><p>以下代码计算女性的平均偏差和标准偏差：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">s &lt;- heights %&gt;% <br>  filter(sex == <span class="hljs-string">&quot;Female&quot;</span>) %&gt;%<br>  summarize(average = mean(height), standard_deviation = sd(height))<br>s<br><span class="hljs-comment">#&gt;   average standard_deviation</span><br><span class="hljs-comment">#&gt; 1    64.9               3.76</span><br></code></pre></td></tr></table></figure><p>将原始数据表作为输入，对其进行过滤以仅保留雌性，然后生成仅具有高度的平均值和标准偏差的新汇总表。也可以使用<code>average</code>和<code>standard_deviation</code>，或者使用相同的其他名称。</p><p>因为存储在其中的结果表<code>s</code>是一个数据帧，所以我们可以使用访问器访问组件<code>$</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">s$average<br><span class="hljs-comment">#&gt; [1] 64.9</span><br>s$standard_deviation<br><span class="hljs-comment">#&gt; [1] 3.76</span><br></code></pre></td></tr></table></figure><p>在<code>summarize</code>编写<code>mean(height)</code>的函数调用，函数将访问名称为“ height”的列，然后计算所得数值向量的平均值。</p><p>eg:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">heights %&gt;% <br>  filter(sex == <span class="hljs-string">&quot;Female&quot;</span>) %&gt;%<br>  summarize(median = median(height), minimum = <span class="hljs-built_in">min</span>(height), <br>            maximum = <span class="hljs-built_in">max</span>(height))<br><span class="hljs-comment">#&gt;   median minimum maximum</span><br><span class="hljs-comment">#&gt; 1     65      51      79</span><br></code></pre></td></tr></table></figure><p>使用<code>quantile</code>函数在一行中获得这三个值：</p><p>eg:<code>quantile(x, c(0,0.5,1))</code>返回向量的最小值（第0个百分位数），中位数（第50个百分位数）和最大值（第100个百分位数）<code>x</code>。以下代码将会报错:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">heights %&gt;% <br>  filter(sex == <span class="hljs-string">&quot;Female&quot;</span>) %&gt;%<br>  summarize(<span class="hljs-built_in">range</span> = quantile(height, <span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>)))<br></code></pre></td></tr></table></figure><p>因为使用function <code>summarize</code>，我们只能调用返回单个值的函数。</p><p>计算美国的平均谋杀率：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">murders &lt;- murders %&gt;% mutate(rate = total/population*<span class="hljs-number">100000</span>)<br></code></pre></td></tr></table></figure><p>美国的谋杀率<strong>不是</strong>该州谋杀率的平均值：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">summarize(murders, mean(rate))<br><span class="hljs-comment">#&gt;   mean(rate)</span><br><span class="hljs-comment">#&gt; 1       2.78</span><br></code></pre></td></tr></table></figure><p>因为在上述计算中，小状态的权重与大状态的权重相同。美国谋杀率是美国谋杀总数除以美国总人口。因此正确的计算是：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">us_murder_rate &lt;- murders %&gt;%<br>  summarize(rate = <span class="hljs-built_in">sum</span>(total) / <span class="hljs-built_in">sum</span>(population) * <span class="hljs-number">100000</span>)<br>us_murder_rate<br><span class="hljs-comment">#&gt;   rate</span><br><span class="hljs-comment">#&gt; 1 3.03</span><br></code></pre></td></tr></table></figure><p>此计算会按其大小成比例地计算较大的状态，从而得出较大的值。</p><h4 id="2、-pull"><a href="#2、-pull" class="headerlink" title="2、 pull"></a>2、 <code>pull</code></h4><p><code>us_murder_rate</code>上面定义的对象仅代表一个数字。但是我们将其存储在数据帧中：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(us_murder_rate)<br><span class="hljs-comment">#&gt; [1] &quot;data.frame&quot;</span><br></code></pre></td></tr></table></figure><p>因为与大多数<strong>dplyr</strong>函数一样，<code>summarize</code>总是返回一个数据帧。</p><p>当管道数据对象时，可以使用该<code>pull</code>函数访问该对象及其列。</p><p>eg:</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">us_murder_rate %&gt;% pull(rate)<br><span class="hljs-comment">#&gt; [1] 3.03</span><br></code></pre></td></tr></table></figure><p>这将返回等于<code>rate</code>列中的值。<code>us_murder_rate us_murder_rate$rate</code></p><p>要使用一行代码从原始数据表中获取一个数字，我们可以输入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">us_murder_rate &lt;- murders %&gt;% <br>  summarize(rate = <span class="hljs-built_in">sum</span>(total) / <span class="hljs-built_in">sum</span>(population) * <span class="hljs-number">100000</span>) %&gt;%<br>  pull(rate)<br><br>us_murder_rate<br><span class="hljs-comment">#&gt; [1] 3.03</span><br></code></pre></td></tr></table></figure><p>现在是一个数字：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(us_murder_rate)<br><span class="hljs-comment">#&gt; [1] &quot;numeric&quot;</span><br></code></pre></td></tr></table></figure><h3 id="3、先分组然后汇总group-by"><a href="#3、先分组然后汇总group-by" class="headerlink" title="3、先分组然后汇总group_by"></a>3、先分组然后汇总<code>group_by</code></h3><p>数据探索中的常见操作是先将数据分为几组，然后为每组计算汇总。例如，我们可能要分别计算男性和女性身高的平均值和标准差。<code>group_by</code>函数可以做到这一点。</p><p>输入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">heights %&gt;% group_by(sex)<br><span class="hljs-comment">#&gt; # A tibble: 1,050 x 2</span><br><span class="hljs-comment">#&gt; # Groups:   sex [2]</span><br><span class="hljs-comment">#&gt;   sex   height</span><br><span class="hljs-comment">#&gt;   &lt;fct&gt;  &lt;dbl&gt;</span><br><span class="hljs-comment">#&gt; 1 Male      75</span><br><span class="hljs-comment">#&gt; 2 Male      70</span><br><span class="hljs-comment">#&gt; 3 Male      68</span><br><span class="hljs-comment">#&gt; 4 Male      74</span><br><span class="hljs-comment">#&gt; 5 Male      61</span><br><span class="hljs-comment">#&gt; # … with 1,045 more rows</span><br></code></pre></td></tr></table></figure><p>对分组后的数据进行汇总：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs R">heights %&gt;% <br>  group_by(sex) %&gt;%<br>  summarize(average = mean(height), standard_deviation = sd(height))<br><span class="hljs-comment">#&gt; # A tibble: 2 x 3</span><br><span class="hljs-comment">#&gt;   sex    average standard_deviation</span><br><span class="hljs-comment">#&gt;   &lt;fct&gt;    &lt;dbl&gt;              &lt;dbl&gt;</span><br><span class="hljs-comment">#&gt; 1 Female    64.9               3.76</span><br><span class="hljs-comment">#&gt; 2 Male      69.3               3.61</span><br></code></pre></td></tr></table></figure><p>该<code>summarize</code>功能将摘要分别应用于每个组。</p><p>eg：计算该国四个地区的平均谋杀率：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;% <br>  group_by(region) %&gt;%<br>  summarize(median_rate = median(rate))<br><span class="hljs-comment">#&gt; # A tibble: 4 x 2</span><br><span class="hljs-comment">#&gt;   region        median_rate</span><br><span class="hljs-comment">#&gt;   &lt;fct&gt;               &lt;dbl&gt;</span><br><span class="hljs-comment">#&gt; 1 Northeast            1.80</span><br><span class="hljs-comment">#&gt; 2 South                3.40</span><br><span class="hljs-comment">#&gt; 3 North Central        1.97</span><br><span class="hljs-comment">#&gt; 4 West                 1.29</span><br></code></pre></td></tr></table></figure><h3 id="五、排序数据框"><a href="#五、排序数据框" class="headerlink" title="五、排序数据框"></a>五、排序数据框</h3><p>检查数据集时，通常可以按不同的列对表进行排序。我们知道<code>order</code>和 <code>sort</code>函数，但是对于排序整个表，<strong>dplyr</strong>函数<code>arrange</code>很有用。例如，在这里我们按人口数量对州进行排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;%<br>  arrange(population) %&gt;%<br>  head()<br><span class="hljs-comment">#&gt;                  state abb        region population total   rate</span><br><span class="hljs-comment">#&gt; 1              Wyoming  WY          West     563626     5  0.887</span><br><span class="hljs-comment">#&gt; 2 District of Columbia  DC         South     601723    99 16.453</span><br><span class="hljs-comment">#&gt; 3              Vermont  VT     Northeast     625741     2  0.320</span><br><span class="hljs-comment">#&gt; 4         North Dakota  ND North Central     672591     4  0.595</span><br><span class="hljs-comment">#&gt; 5               Alaska  AK          West     710231    19  2.675</span><br><span class="hljs-comment">#&gt; 6         South Dakota  SD North Central     814180     8  0.983</span><br></code></pre></td></tr></table></figure><p>为了按谋杀率从最低到最高查看各州，改用<code>rate</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;% <br>  arrange(rate) %&gt;%<br>  head()<br><span class="hljs-comment">#&gt;           state abb        region population total  rate</span><br><span class="hljs-comment">#&gt; 1       Vermont  VT     Northeast     625741     2 0.320</span><br><span class="hljs-comment">#&gt; 2 New Hampshire  NH     Northeast    1316470     5 0.380</span><br><span class="hljs-comment">#&gt; 3        Hawaii  HI          West    1360301     7 0.515</span><br><span class="hljs-comment">#&gt; 4  North Dakota  ND North Central     672591     4 0.595</span><br><span class="hljs-comment">#&gt; 5          Iowa  IA North Central    3046355    21 0.689</span><br><span class="hljs-comment">#&gt; 6         Idaho  ID          West    1567582    12 0.766</span><br></code></pre></td></tr></table></figure><p>arrange默认按升序排列。在<strong>dplyr中</strong>，函数<code>desc</code>将向量转换为降序排列。要按降序对表格进行排序，我们可以输入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;% <br>  arrange(desc(rate)) <br></code></pre></td></tr></table></figure><h4 id="1、嵌套排序"><a href="#1、嵌套排序" class="headerlink" title="1、嵌套排序"></a>1、嵌套排序</h4><p>可以先按<code>region</code>排序，然后在<code>region</code>内按谋杀率排序：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;% <br>  arrange(region, rate) %&gt;% <br>  head()<br><span class="hljs-comment">#&gt;           state abb    region population total  rate</span><br><span class="hljs-comment">#&gt; 1       Vermont  VT Northeast     625741     2 0.320</span><br><span class="hljs-comment">#&gt; 2 New Hampshire  NH Northeast    1316470     5 0.380</span><br><span class="hljs-comment">#&gt; 3         Maine  ME Northeast    1328361    11 0.828</span><br><span class="hljs-comment">#&gt; 4  Rhode Island  RI Northeast    1052567    16 1.520</span><br><span class="hljs-comment">#&gt; 5 Massachusetts  MA Northeast    6547629   118 1.802</span><br><span class="hljs-comment">#&gt; 6      New York  NY Northeast   19378102   517 2.668</span><br></code></pre></td></tr></table></figure><h4 id="2、top-n"><a href="#2、top-n" class="headerlink" title="2、top_n"></a>2、<code>top_n</code></h4><p>使用函数<code>head</code>来避免页面被整个数据集填满。如果希望看到更大的比例，可以使用该<code>top_n</code>函数。函数将数据帧作为第一个参数，第二个为显示的行数，第三个为进行过滤的变量。这是如何查看前5行的示例：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;% top_n(<span class="hljs-number">5</span>, rate)<br><span class="hljs-comment">#&gt;                  state abb        region population total  rate</span><br><span class="hljs-comment">#&gt; 1 District of Columbia  DC         South     601723    99 16.45</span><br><span class="hljs-comment">#&gt; 2            Louisiana  LA         South    4533372   351  7.74</span><br><span class="hljs-comment">#&gt; 3             Maryland  MD         South    5773552   293  5.07</span><br><span class="hljs-comment">#&gt; 4             Missouri  MO North Central    5988927   321  5.36</span><br><span class="hljs-comment">#&gt; 5       South Carolina  SC         South    4625364   207  4.48</span><br></code></pre></td></tr></table></figure><p>请注意，行未按<code>rate</code>排序，仅进行了过滤。如果要排序，则需要使用<code>arrange</code>。如果第三个参数保留为空白，<code>top_n</code>则按最后一列过滤。</p><h3 id="六、小标题"><a href="#六、小标题" class="headerlink" title="六、小标题"></a>六、小标题</h3><p>eg：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;% group_by(region)<br><span class="hljs-comment">#&gt; # A tibble: 51 x 6</span><br><span class="hljs-comment">#&gt; # Groups:   region [4]</span><br><span class="hljs-comment">#&gt;   state      abb   region population total  rate</span><br><span class="hljs-comment">#&gt;   &lt;chr&gt;      &lt;chr&gt; &lt;fct&gt;       &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="hljs-comment">#&gt; 1 Alabama    AL    South     4779736   135  2.82</span><br><span class="hljs-comment">#&gt; 2 Alaska     AK    West       710231    19  2.68</span><br><span class="hljs-comment">#&gt; 3 Arizona    AZ    West      6392017   232  3.63</span><br><span class="hljs-comment">#&gt; 4 Arkansas   AR    South     2915918    93  3.19</span><br><span class="hljs-comment">#&gt; 5 California CA    West     37253956  1257  3.37</span><br><span class="hljs-comment">#&gt; # … with 46 more rows</span><br></code></pre></td></tr></table></figure><p>使用以下方法了解返回对象的类：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;% group_by(region) %&gt;% <span class="hljs-built_in">class</span>()<br><span class="hljs-comment">#&gt; [1] &quot;grouped_df&quot; &quot;tbl_df&quot;     &quot;tbl&quot;        &quot;data.frame&quot;</span><br></code></pre></td></tr></table></figure><h4 id="1、小标题显示效果更好"><a href="#1、小标题显示效果更好" class="headerlink" title="1、小标题显示效果更好"></a>1、小标题显示效果更好</h4><p>小标题的打印方法比数据框的可读性更高。<code>murders</code>如果将打印转换为小标题，则比较打印的输出和谋杀的输出。可以使用来完成<code>as_tibble(murders)</code>。如果使用RStudio，则小标题的输出将调整为窗口大小。可以R控制台的宽度，显示更多/更少列的方式。</p><h4 id="2、小标题的子集是小标题"><a href="#2、小标题的子集是小标题" class="headerlink" title="2、小标题的子集是小标题"></a>2、小标题的子集是小标题</h4><p>如果对数据框的列进行子集化，则可能会获得一个非数据框的对象，例如矢量或标量。例如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(murders[,<span class="hljs-number">4</span>])<br><span class="hljs-comment">#&gt; [1] &quot;numeric&quot;</span><br></code></pre></td></tr></table></figure><p>如果不是数据帧，不会报错：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(as_tibble(murders)[,<span class="hljs-number">4</span>])<br><span class="hljs-comment">#&gt; [1] &quot;tbl_df&quot;     &quot;tbl&quot;        &quot;data.frame&quot;</span><br></code></pre></td></tr></table></figure><p>在tidyverse中，函数需要数据帧作为输入。</p><p>对于小标题，要访问定义列的向量，而不获取数据帧，则需要使用访问器<code>$</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(as_tibble(murders)$population)<br><span class="hljs-comment">#&gt; [1] &quot;numeric&quot;</span><br></code></pre></td></tr></table></figure><p>如果访问不存在的列，则小标题警告。</p><p>eg:写<code>Population</code>了<code>population</code>以下内容：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">murders$Population<br><span class="hljs-comment">#&gt; NULL</span><br></code></pre></td></tr></table></figure><p>如果返回<code>NULL</code>而没有警告，可以这样转换为警告：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">as_tibble(murders)$Population<br>#&gt; Warning: Unknown or uninitialised column: &#x27;Population&#x27;.<br>#&gt; NULL<br></code></pre></td></tr></table></figure><h4 id="3、小标题可以包含复杂的条目"><a href="#3、小标题可以包含复杂的条目" class="headerlink" title="3、小标题可以包含复杂的条目"></a>3、小标题可以包含复杂的条目</h4><p>尽管数据帧的列需要是数字，字符串或逻辑值的向量，但小标题可以具有更复杂的对象，例如列表或函数</p><p>eg：创建小标题：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">tibble(id = <span class="hljs-built_in">c</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>), func = <span class="hljs-built_in">c</span>(mean, median, sd))<br><span class="hljs-comment">#&gt; # A tibble: 3 x 2</span><br><span class="hljs-comment">#&gt;      id func  </span><br><span class="hljs-comment">#&gt;   &lt;dbl&gt; &lt;list&gt;</span><br><span class="hljs-comment">#&gt; 1     1 &lt;fn&gt;  </span><br><span class="hljs-comment">#&gt; 2     2 &lt;fn&gt;  </span><br><span class="hljs-comment">#&gt; 3     3 &lt;fn&gt;</span><br></code></pre></td></tr></table></figure><h4 id="4、小标题可以分组"><a href="#4、小标题可以分组" class="headerlink" title="4、小标题可以分组"></a>4、小标题可以分组</h4><p>该函数<code>group_by</code>返回一种特殊的小标题：分组小标题。此类存储的信息表明哪些行属于哪些组。可以通过<code>summarize</code>功能知道组信息。</p><h4 id="5、使用tibble代替创建小标题data-frame"><a href="#5、使用tibble代替创建小标题data-frame" class="headerlink" title="5、使用tibble代替创建小标题data.frame"></a>5、使用<code>tibble</code>代替创建小标题<code>data.frame</code></h4><p>使用<code>tibble</code>函数创建自己的数据帧：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">grades &lt;- tibble(<span class="hljs-built_in">names</span> = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Juan&quot;</span>, <span class="hljs-string">&quot;Jean&quot;</span>, <span class="hljs-string">&quot;Yao&quot;</span>), <br>                     exam_1 = <span class="hljs-built_in">c</span>(<span class="hljs-number">95</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">85</span>), <br>                     exam_2 = <span class="hljs-built_in">c</span>(<span class="hljs-number">90</span>, <span class="hljs-number">85</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>))<br></code></pre></td></tr></table></figure><p>Basic R（未加载软件包）具有名称非常相似的函数<code>data.frame</code>，可用于创建常规数据帧而不是小标题。默认情况下，将<code>data.frame</code>字符强制转换为factor，而不提供警告或消息：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">grades &lt;- data.frame(<span class="hljs-built_in">names</span> = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Juan&quot;</span>, <span class="hljs-string">&quot;Jean&quot;</span>, <span class="hljs-string">&quot;Yao&quot;</span>), <br>                     exam_1 = <span class="hljs-built_in">c</span>(<span class="hljs-number">95</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">85</span>), <br>                     exam_2 = <span class="hljs-built_in">c</span>(<span class="hljs-number">90</span>, <span class="hljs-number">85</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>))<br><span class="hljs-built_in">class</span>(grades$<span class="hljs-built_in">names</span>)<br><span class="hljs-comment">#&gt; [1] &quot;factor&quot;</span><br></code></pre></td></tr></table></figure><p>为了避免这种情况，使用参数<code>stringsAsFactors</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">grades &lt;- data.frame(<span class="hljs-built_in">names</span> = <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;John&quot;</span>, <span class="hljs-string">&quot;Juan&quot;</span>, <span class="hljs-string">&quot;Jean&quot;</span>, <span class="hljs-string">&quot;Yao&quot;</span>), <br>                     exam_1 = <span class="hljs-built_in">c</span>(<span class="hljs-number">95</span>, <span class="hljs-number">80</span>, <span class="hljs-number">90</span>, <span class="hljs-number">85</span>), <br>                     exam_2 = <span class="hljs-built_in">c</span>(<span class="hljs-number">90</span>, <span class="hljs-number">85</span>, <span class="hljs-number">85</span>, <span class="hljs-number">90</span>),<br>                     stringsAsFactors = <span class="hljs-literal">FALSE</span>)<br><span class="hljs-built_in">class</span>(grades$<span class="hljs-built_in">names</span>)<br><span class="hljs-comment">#&gt; [1] &quot;character&quot;</span><br></code></pre></td></tr></table></figure><p>将常规数据帧转换为小标题，使用<code>as_tibble</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">as_tibble(grades) %&gt;% <span class="hljs-built_in">class</span>()<br><span class="hljs-comment">#&gt; [1] &quot;tbl_df&quot;     &quot;tbl&quot;        &quot;data.frame&quot;</span><br></code></pre></td></tr></table></figure><h3 id="七、点运算符"><a href="#七、点运算符" class="headerlink" title="七、点运算符"></a>七、点运算符</h3><p>使用管道<code>%&gt;%</code>，当我们处理数据帧时，不必一直命名新对象。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">tab_1 &lt;- filter(murders, region == <span class="hljs-string">&quot;South&quot;</span>)<br>tab_2 &lt;- mutate(tab_1, rate = total / population * <span class="hljs-number">10</span>^<span class="hljs-number">5</span>)<br>rates &lt;- tab_2$rate<br>median(rates)<br><span class="hljs-comment">#&gt; [1] 3.4</span><br></code></pre></td></tr></table></figure><p>可以通过输入以下内容来避免定义任何新的中间对象：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">filter(murders, region == <span class="hljs-string">&quot;South&quot;</span>) %&gt;% <br>  mutate(rate = total / population * <span class="hljs-number">10</span>^<span class="hljs-number">5</span>) %&gt;% <br>  summarize(median = median(rate)) %&gt;%<br>  pull(median)<br><span class="hljs-comment">#&gt; [1] 3.4</span><br></code></pre></td></tr></table></figure><p>函数将数据帧作为第一个参数，如果要访问数据帧的组件，使用点运算符。</p><p>eg：在不使用<code>pull</code>函数的情况下访问速率向量</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">rates &lt;-   filter(murders, region == <span class="hljs-string">&quot;South&quot;</span>) %&gt;% <br>  mutate(rate = total / population * <span class="hljs-number">10</span>^<span class="hljs-number">5</span>) %&gt;% <br>  .$rate<br>median(rates)<br><span class="hljs-comment">#&gt; [1] 3.4</span><br></code></pre></td></tr></table></figure><h3 id="八、-do"><a href="#八、-do" class="headerlink" title="八、 do"></a>八、 <code>do</code></h3><p>tidyverse函数知道如何解释分组的小标题，为了使通过管道<code>%&gt;%</code>的字符串命令变得容易，tidyverse函数始终返回数据帧，这确保了函数的输出被接受为另一个函数的输入。但是大多数R函数不能识别分组的小动作，也不返回数据帧。</p><p>用<code>quantile</code>在一次调用中用于获取最小值，中值和最大值，则会收到错误消息：<code>Error: expecting result of length one, got : 2</code>。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">data(heights)<br>heights %&gt;% <br>  filter(sex == <span class="hljs-string">&quot;Female&quot;</span>) %&gt;%<br>  summarize(<span class="hljs-built_in">range</span> = quantile(height, <span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>)))<br></code></pre></td></tr></table></figure><p>可以使用该<code>do</code>功能来解决此问题。</p><p>首先编写一个适合tidyverse方法的函数，它接收一个数据帧并返回一个数据帧：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">my_summary &lt;- <span class="hljs-keyword">function</span>(dat)&#123;<br>  x &lt;- quantile(dat$height, <span class="hljs-built_in">c</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>, <span class="hljs-number">1</span>))<br>  tibble(<span class="hljs-built_in">min</span> = x[<span class="hljs-number">1</span>], median = x[<span class="hljs-number">2</span>], <span class="hljs-built_in">max</span> = x[<span class="hljs-number">3</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>可以将该函数应用于高度数据集以获取摘要：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs R">heights %&gt;% <br>  group_by(sex) %&gt;% <br>  my_summary<br><span class="hljs-comment">#&gt; # A tibble: 1 x 3</span><br><span class="hljs-comment">#&gt;     min median   max</span><br><span class="hljs-comment">#&gt;   &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="hljs-comment">#&gt; 1    50   68.5  82.7</span><br></code></pre></td></tr></table></figure><p>我们需要每种性别的摘要，而代码仅返回一个摘要。这是因为<code>my_summary</code>不是tidyverse的一部分，并且不知道如何处理分组的小标题。用<code>do</code>建立此连接：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R">heights %&gt;% <br>  group_by(sex) %&gt;% <br>  do(my_summary(.))<br><span class="hljs-comment">#&gt; # A tibble: 2 x 4</span><br><span class="hljs-comment">#&gt; # Groups:   sex [2]</span><br><span class="hljs-comment">#&gt;   sex      min median   max</span><br><span class="hljs-comment">#&gt;   &lt;fct&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;</span><br><span class="hljs-comment">#&gt; 1 Female    51   65.0  79  </span><br><span class="hljs-comment">#&gt; 2 Male      50   69    82.7</span><br></code></pre></td></tr></table></figure><p>这里需要使用点运算符。如果不使用点，那么<code>my_summary</code>有<em>没有参数</em>，并返回一个错误告诉我们，<code>argument &quot;dat&quot;</code>缺少。可以通过键入以下内容查看错误：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">heights %&gt;% <br>  group_by(sex) %&gt;% <br>  do(my_summary())<br></code></pre></td></tr></table></figure><p>如果不使用括号，则不会执行该函数，而是<code>do</code>尝试返回该函数。由于<code>do</code>必须始终返回数据帧，因此会产生错误。可以通过键入以下内容查看错误：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">heights %&gt;% <br>  group_by(sex) %&gt;% <br>  do(my_summary)<br></code></pre></td></tr></table></figure><h3 id="九、purrr包"><a href="#九、purrr包" class="headerlink" title="九、purrr包"></a>九、<strong>purrr</strong>包</h3><p>构造一个函数，并使用<code>sapply</code>来计算<code>n</code>个这样的值的和：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">compute_s_n &lt;- <span class="hljs-keyword">function</span>(n)&#123;<br>  x &lt;- 1:n<br>  <span class="hljs-built_in">sum</span>(x)<br>&#125;<br>n &lt;- 1:<span class="hljs-number">25</span><br>s_n &lt;- sapply(n, compute_s_n)<br></code></pre></td></tr></table></figure><p>将相同功能或过程应用于对象元素的操作在数据分析中非常常见。</p><p><code>sapply</code>可以返回几种不同的对象类型；例如，我们可能希望从一行代码获得数字结果，但<code>sapply</code>在某些情况下可能会将我们的结果转换为字符。</p><p><strong>purrr</strong>函数将返回指定类型的对象，或者如果不可能的话将返回错误。</p><p>eg：<strong>purrr</strong>函数<code>map</code>返回一个列表：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">library(purrr)<br>s_n &lt;- map(n, compute_s_n)<br><span class="hljs-built_in">class</span>(s_n)<br><span class="hljs-comment">#&gt; [1] &quot;list&quot;</span><br></code></pre></td></tr></table></figure><p>如果想要一个数值向量，可以改用<code>map_dbl</code>返回数值向量：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">s_n &lt;- map_dbl(n, compute_s_n)<br><span class="hljs-built_in">class</span>(s_n)<br><span class="hljs-comment">#&gt; [1] &quot;numeric&quot;</span><br></code></pre></td></tr></table></figure><p>这将产生与<code>sapply</code>上面显示的调用相同的结果。</p><p>与tidyverse进行交互的<strong>purrr</strong>函数<code>map_df</code>:返回一个tibble数据帧。但是，被调用的函数需要返回带有名称的向量或列表。因此，以下代码将导致<code>Argument 1 must have names</code>错误：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">s_n &lt;- map_df(n, compute_s_n)<br></code></pre></td></tr></table></figure><p>需要更改功能以使其工作：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">compute_s_n &lt;- <span class="hljs-keyword">function</span>(n)&#123;<br>  x &lt;- 1:n<br>  tibble(<span class="hljs-built_in">sum</span> = <span class="hljs-built_in">sum</span>(x))<br>&#125;<br>s_n &lt;- map_df(n, compute_s_n)<br></code></pre></td></tr></table></figure><h3 id="十、-Tidyverse条件"><a href="#十、-Tidyverse条件" class="headerlink" title="十、 Tidyverse条件"></a>十、 Tidyverse条件</h3><h4 id="1、-case-when"><a href="#1、-case-when" class="headerlink" title="1、 case_when"></a>1、 <code>case_when</code></h4><p><code>case_when</code>函数:向量化条件语句</p><p>与<code>ifelse</code>just <code>TRUE</code>或相反，它可以输出任意数量的值<code>FALSE</code>。</p><p>eg：将数字分为负数，正数和0：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">x &lt;- <span class="hljs-built_in">c</span>(-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>case_when(x &lt; <span class="hljs-number">0</span> ~ <span class="hljs-string">&quot;Negative&quot;</span>, <br>          x &gt; <span class="hljs-number">0</span> ~ <span class="hljs-string">&quot;Positive&quot;</span>, <br>          <span class="hljs-literal">TRUE</span>  ~ <span class="hljs-string">&quot;Zero&quot;</span>)<br><span class="hljs-comment">#&gt; [1] &quot;Negative&quot; &quot;Negative&quot; &quot;Zero&quot;     &quot;Positive&quot; &quot;Positive&quot;</span><br></code></pre></td></tr></table></figure><p>此函数的常见用法是根据现有变量定义分类变量。例如，假设我们要比较四个州的谋杀率：<em>新英格兰</em>，<em>西海岸</em>，<em>南部</em>和<em>其他州</em>。对于每个州，我们需要询问它是否在新英格兰，如果不是，则询问它是否在西海岸，如果不是，则询问它是否在南部，如果不是，则分配<em>其他州</em>。这是我们<code>case_when</code>用来执行此操作的方法：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs R">murders %&gt;% <br>  mutate(group = case_when(<br>    abb %in% <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;ME&quot;</span>, <span class="hljs-string">&quot;NH&quot;</span>, <span class="hljs-string">&quot;VT&quot;</span>, <span class="hljs-string">&quot;MA&quot;</span>, <span class="hljs-string">&quot;RI&quot;</span>, <span class="hljs-string">&quot;CT&quot;</span>) ~ <span class="hljs-string">&quot;New England&quot;</span>,<br>    abb %in% <span class="hljs-built_in">c</span>(<span class="hljs-string">&quot;WA&quot;</span>, <span class="hljs-string">&quot;OR&quot;</span>, <span class="hljs-string">&quot;CA&quot;</span>) ~ <span class="hljs-string">&quot;West Coast&quot;</span>,<br>    region == <span class="hljs-string">&quot;South&quot;</span> ~ <span class="hljs-string">&quot;South&quot;</span>,<br>    <span class="hljs-literal">TRUE</span> ~ <span class="hljs-string">&quot;Other&quot;</span>)) %&gt;%<br>  group_by(group) %&gt;%<br>  summarize(rate = <span class="hljs-built_in">sum</span>(total) / <span class="hljs-built_in">sum</span>(population) * <span class="hljs-number">10</span>^<span class="hljs-number">5</span>) <br><span class="hljs-comment">#&gt; # A tibble: 4 x 2</span><br><span class="hljs-comment">#&gt;   group        rate</span><br><span class="hljs-comment">#&gt;   &lt;chr&gt;       &lt;dbl&gt;</span><br><span class="hljs-comment">#&gt; 1 New England  1.72</span><br><span class="hljs-comment">#&gt; 2 Other        2.71</span><br><span class="hljs-comment">#&gt; 3 South        3.63</span><br><span class="hljs-comment">#&gt; 4 West Coast   2.90</span><br></code></pre></td></tr></table></figure><h4 id="2、-between"><a href="#2、-between" class="headerlink" title="2、 between"></a>2、 <code>between</code></h4><p>数据分析中的常见操作是确定值是否落在间隔内。可以使用条件检查，例如，要检查向量的元素<code>x</code>是否在之间<code>a</code>，<code>b</code>我们可以输入</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">x &gt;= a &amp; x &lt;= b<br></code></pre></td></tr></table></figure><p><code>between</code>功能执行相同的操作：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">between(x, a, b)<br></code></pre></td></tr></table></figure><h2 id="IX-导入数据"><a href="#IX-导入数据" class="headerlink" title="IX 导入数据"></a>IX 导入数据</h2><p>科研情况下需要从文件，数据库或其他来源将数据导入R。当前，最常见的存储和共享数据以供分析的方法之一是通过电子电子表格。电子表格将数据存储在行和列中。它基本上是数据帧的文件版本。将此类表保存到计算机文件时，需要一种方法来定义新行或新列何时结束而另一行开始。这又定义了存储单个值的单元格。</p><p>当使用文本文件创建电子表格时（例如使用简单的文本编辑器创建的电子表格），将用return定义新行，并使用一些预定义的特殊字符分隔列。最常见的字符是逗号（<code>,</code>），分号（<code>;</code>），空格（）和制表符（预设数量的空格或<code>\t</code>）。这是一个用逗号分隔的文件通过基本文本编辑器打开后的样子的示例：</p><p><img src="https://rafalab.github.io/dsbook/R/img/csv-file.png" alt="img"></p><p>第一行包含列名，而不是数据。我们称其为<em>标头</em>，当我们从电子表格中读取数据时，重要的是要知道文件是否具有标头。大多数读取功能都假定有标头。要知道文件是否具有标题，可以在尝试读取文件之前先查看文件。可以使用文本编辑器或RStudio来完成。在RStudio中，我们可以通过在编辑器中打开文件或导航到文件位置，双击文件，然后单击<em>View File来实现</em>。</p><p>但是，并非所有电子表格文件都为文本格式。在浏览器上呈现的Google表格就是一个例子。另一个示例是Microsoft Excel使用的专有格式。无法使用文本编辑器查看这些内容。尽管如此，由于Microsoft Excel软件的广泛使用，此格式仍被广泛使用。</p><h3 id="1、路径和工作目录"><a href="#1、路径和工作目录" class="headerlink" title="1、路径和工作目录"></a>1、路径和工作目录</h3><p>从电子表格导入数据的第一步是找到包含数据的文件。我们需要让进行导入的R函数知道在哪里查找包含数据的文件。最简单的方法是在默认情况下在其中具有导入功能的文件夹中拥有该文件的副本。完成此操作后，我们只需提供文件名即可。</p><p>包含美国谋杀数据的电子表格包含在<strong>dslabs</strong>软件包中。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">filename &lt;- <span class="hljs-string">&quot;murders.csv&quot;</span><br>dir &lt;- system.file(<span class="hljs-string">&quot;extdata&quot;</span>, package = <span class="hljs-string">&quot;dslabs&quot;</span>) <br>fullpath &lt;- file.path(dir, filename)<br>file.copy(fullpath, <span class="hljs-string">&quot;murders.csv&quot;</span>)<br></code></pre></td></tr></table></figure><p>该代码不会将数据读入R，而只是复制一个文件。一旦文件被复制，可以用简单的代码行导入数据。<code>read_csv</code>函数在<strong>readr</strong>包中，这是tidyverse的部分。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">library(tidyverse)<br>dat &lt;- read_csv(filename)<br></code></pre></td></tr></table></figure><p>数据被导入并存储在中<code>dat</code>。</p><h4 id="1-1、文件系统"><a href="#1-1、文件系统" class="headerlink" title="1.1、文件系统"></a>1.1、文件系统</h4><p>将计算机的文件系统视为一系列嵌套的文件夹，每个文件夹包含其他文件夹和文件。数据科学家将文件夹称为<em>目录</em>。将包含所有其他文件夹的文件夹称为<em>根目录</em>。将当前所在的<em>目录</em>称为<em>工作目录</em>。因此，工作目录在您移动文件夹时会发生变化：将其视为当前位置。</p><h4 id="1-2相对路径和完整路径"><a href="#1-2相对路径和完整路径" class="headerlink" title="1.2相对路径和完整路径"></a>1.2相对路径和完整路径</h4><p>文件的<em>路径</em>是目录名称的列表，可以将其视为有关单击哪些文件夹以及以什么顺序查找文件的说明。如果这些说明是用于从根目录中查找文件，则将其称为<em>完整路径</em>。如果有关从工作目录开始查找文件的说明，则将其称为<em>相对路径</em>。</p><p>要查看系统上完整路径的示例，则输入以下内容：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">system.file(package = <span class="hljs-string">&quot;dslabs&quot;</span>)<br></code></pre></td></tr></table></figure><p>用斜杠分隔的字符串是目录名称。第一个斜杠代表根目录，如果出现的第一个目录名称前面没有斜杠，则假定该路径是相对路径。我们可以使用该函数<code>list.files</code>查看相对路径的示例。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs R">dir &lt;- system.file(package = <span class="hljs-string">&quot;dslabs&quot;</span>)<br>list.files(path = dir)<br><span class="hljs-comment">#&gt;  [1] &quot;data&quot;        &quot;DESCRIPTION&quot; &quot;extdata&quot;     &quot;help&quot;       </span><br><span class="hljs-comment">#&gt;  [5] &quot;html&quot;        &quot;INDEX&quot;       &quot;Meta&quot;        &quot;NAMESPACE&quot;  </span><br><span class="hljs-comment">#&gt;  [9] &quot;R&quot;           &quot;script&quot;</span><br></code></pre></td></tr></table></figure><p>如果从具有完整路径的目录开始，这些相对路径将为我们提供文件或目录的位置。例如，上例中<code>help</code>目录的完整路径为<code>/Library/Frameworks/R.framework/Versions/3.5/Resources/library/dslabs/help</code>。</p><h4 id="1-3、工作目录"><a href="#1-3、工作目录" class="headerlink" title="1.3、工作目录"></a>1.3、工作目录</h4><p>建议仅在代码中编写相对路径。原因是完整路径对于您的计算机是唯一的，并且代码可移植。可以使用<code>getwd</code>函数来获得工作目录的完整路径，而无需显式写出。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">wd &lt;- getwd()<br></code></pre></td></tr></table></figure><p>如果需要更改工作目录，则可以使用该功能<code>setwd</code>，也可以通过RStudio通过单击“会话”来更改它。</p><h4 id="1-4、生成路径名"><a href="#1-4、生成路径名" class="headerlink" title="1.4、生成路径名"></a>1.4、生成路径名</h4><p>创建对象时，上面给出了另一个获取完整路径而不显式写出示例的示例<code>fullpath</code>：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">filename &lt;- <span class="hljs-string">&quot;murders.csv&quot;</span><br>dir &lt;- system.file(<span class="hljs-string">&quot;extdata&quot;</span>, package = <span class="hljs-string">&quot;dslabs&quot;</span>) <br>fullpath &lt;- file.path(dir, filename)<br></code></pre></td></tr></table></figure><p>该函数<code>system.file</code>提供文件夹的完整路径，该文件夹包含与<code>package</code>参数指定的包相关的所有文件和目录。通过浏览其中的目录，<code>dir</code>我们发现<code>extdata</code>包含了我们想要的文件：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">dir &lt;- system.file(package = <span class="hljs-string">&quot;dslabs&quot;</span>) <br>filename %in% list.files(file.path(dir, <span class="hljs-string">&quot;extdata&quot;</span>)) <br><span class="hljs-comment">#&gt; [1] TRUE</span><br></code></pre></td></tr></table></figure><p><code>system.file</code>函数允许我们提供子目录作为第一个参数，可以<code>extdata</code>像以下方式获取目录的完整路径：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">dir &lt;- system.file(<span class="hljs-string">&quot;extdata&quot;</span>, package = <span class="hljs-string">&quot;dslabs&quot;</span>) <br></code></pre></td></tr></table></figure><p>函数<code>file.path</code>用于合并目录名称，以生成要导入的文件的完整路径。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">fullpath &lt;- file.path(dir, filename)<br></code></pre></td></tr></table></figure><h4 id="1-5、使用路径复制文件"><a href="#1-5、使用路径复制文件" class="headerlink" title="1.5、使用路径复制文件"></a>1.5、使用路径复制文件</h4><p>我们用于将文件复制到主目录中的最后一行代码使用<br>函数<code>file.copy</code>。该函数有两个参数：要复制的文件和在新目录中赋予它的名称。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">file.copy(fullpath, <span class="hljs-string">&quot;murders.csv&quot;</span>)<br><span class="hljs-comment">#&gt; [1] TRUE</span><br></code></pre></td></tr></table></figure><p>如果文件复制成功，<code>file.copy</code>函数将返回<code>TRUE</code>。请注意，我们给文件起了相同的名称<code>murders.csv</code>，也可以给它起任何名字。还要注意，通过不以斜杠开头的字符串，R假定这是相对路径，并将文件复制到工作目录。</p><p>要在工作目录中看到该文件，可以使用以下命令进行检查：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">list.files()<br></code></pre></td></tr></table></figure><h3 id="2、readr和readxl软件包"><a href="#2、readr和readxl软件包" class="headerlink" title="2、readr和readxl软件包"></a>2、readr和readxl软件包</h3><p><strong>dslabs</strong>软件包提供了文件<code>murders.csv</code>。将文件复制到工作目录中：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">filename &lt;- <span class="hljs-string">&quot;murders.csv&quot;</span><br>dir &lt;- system.file(<span class="hljs-string">&quot;extdata&quot;</span>, package = <span class="hljs-string">&quot;dslabs&quot;</span>) <br>fullpath &lt;- file.path(dir, filename)<br>file.copy(fullpath, <span class="hljs-string">&quot;murders.csv&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="2-1、阅读器"><a href="#2-1、阅读器" class="headerlink" title="2.1、阅读器"></a>2.1、阅读器</h4><p><strong>readr</strong>库包括用于读取存储在文本文件中的电子表格到R.数据功能<strong>readr</strong>是的一部分<strong>tidyverse</strong>包，或者可以直接加载：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">library(readr)<br></code></pre></td></tr></table></figure><p>以下功能可用于读入电子表格：</p><table><thead><tr><th>功能</th><th>格式</th><th>典型后缀</th></tr></thead><tbody><tr><td>read_table</td><td>空格分隔值</td><td>文本文件</td></tr><tr><td>read_csv</td><td>逗号分隔值</td><td>CSV</td></tr><tr><td>read_csv2</td><td>分号分隔的值</td><td>CSV</td></tr><tr><td>read_tsv</td><td>制表符分隔的分隔值</td><td>电视</td></tr><tr><td>read_delim</td><td>通用文本文件格式，必须定义定界符</td><td>文本文件</td></tr></tbody></table><p>尽管后缀通常告诉我们文件的类型，但是不能保证它们始终匹配。可以打开文件进行查看或使用函数<code>read_lines</code>查看以下几行：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">read_lines(<span class="hljs-string">&quot;murders.csv&quot;</span>, n_max = <span class="hljs-number">3</span>)<br><span class="hljs-comment">#&gt; [1] &quot;state,abb,region,population,total&quot;</span><br><span class="hljs-comment">#&gt; [2] &quot;Alabama,AL,South,4779736,135&quot;     </span><br><span class="hljs-comment">#&gt; [3] &quot;Alaska,AK,West,710231,19&quot;</span><br></code></pre></td></tr></table></figure><p>这也表明存在标题。可以使用<code>read_csv</code>将数据读入R：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs R">dat &lt;- read_csv(filename)<br><span class="hljs-comment">#&gt; Parsed with column specification:</span><br><span class="hljs-comment">#&gt; cols(</span><br><span class="hljs-comment">#&gt;   state = col_character(),</span><br><span class="hljs-comment">#&gt;   abb = col_character(),</span><br><span class="hljs-comment">#&gt;   region = col_character(),</span><br><span class="hljs-comment">#&gt;   population = col_double(),</span><br><span class="hljs-comment">#&gt;   total = col_double()</span><br><span class="hljs-comment">#&gt; )</span><br></code></pre></td></tr></table></figure><p><code>dat</code>是一个<code>tibble</code>，而不仅仅是数据帧，因为<code>read_csv</code>是<strong>tidyverse</strong>解析器。通过以下方式确认数据已被读入：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">View(dat)<br></code></pre></td></tr></table></figure><p>还可以使用文件的完整路径：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">dat &lt;- read_csv(fullpath)<br></code></pre></td></tr></table></figure><h4 id="2-2、readxl"><a href="#2-2、readxl" class="headerlink" title="2.2、readxl"></a>2.2、readxl</h4><p>使用以下方式加载<strong>readxl</strong>软件包：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">library(readxl)<br></code></pre></td></tr></table></figure><p>该软件包提供了读取Microsoft Excel格式的功能：</p><table><thead><tr><th>功能</th><th>格式</th><th>典型后缀</th></tr></thead><tbody><tr><td>read_excel</td><td>自动检测格式</td><td>xls，xlsx</td></tr><tr><td>read_xls</td><td>原始格式</td><td>xls</td></tr><tr><td>read_xlsx</td><td>新格式</td><td>xlsx</td></tr></tbody></table><p>Microsoft Excel格式允许您在一个文件中包含多个电子表格。这些被称为工作<em>表</em>。上面列出的功能默认情况下会读取第一页，但也可以阅读其他功能。<code>excel_sheets</code>函数提供Excel文件中所有工作表的名称。然后，可以将这些名称传递给上述<code>sheet</code>三个函数中的参数，以读取除第一个以外的工作表。</p><h3 id="3、下载文件"><a href="#3、下载文件" class="headerlink" title="3、下载文件"></a>3、下载文件</h3><p>数据驻留的另一个常见位置是在Internet上。将这些数据保存在文件中后，我们可以下载它们，然后将其导入，甚至直接从Web上读取它们。例如，我们注意到，由于<strong>dslabs</strong>软件包位于GitHub上，因此我们随该软件包下载的文件具有url：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs R">url &lt;- <span class="hljs-string">&quot;https://raw.githubusercontent.com/rafalab/dslabs/master/inst/</span><br><span class="hljs-string">extdata/murders.csv&quot;</span><br></code></pre></td></tr></table></figure><p>该<code>read_csv</code>文件可以直接读取以下文件：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">dat &lt;- read_csv(url)<br></code></pre></td></tr></table></figure><p>如果要获得文件的本地副本，可以使用以下<code>download.file</code>功能：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">download.file(url, <span class="hljs-string">&quot;murders.csv&quot;</span>)<br></code></pre></td></tr></table></figure><p>这将下载文件，并使用名称将其保存在您的系统上<code>murders.csv</code>。您可以在此处使用任何名称，而不必使用<code>murders.csv</code>。请注意，使用<code>download.file</code>时要小心，因为<strong>它会覆盖现有文件而不会发出警告</strong>。</p><p>从Internet下载数据有时有用的两个功能是<code>tempdir</code>和<code>tempfile</code>。第一个创建具有随机名称的目录，该名称很可能是唯一的。同样，<code>tempfile</code>创建一个字符串（而不是文件），该字符串很可能是唯一的文件名。因此，您可以运行以下命令，该命令在导入数据后会删除临时文件：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R">tmp_filename &lt;- tempfile()<br>download.file(url, tmp_filename)<br>dat &lt;- read_csv(tmp_filename)<br>file.remove(tmp_filename)<br></code></pre></td></tr></table></figure><h3 id="4、R库导入功能"><a href="#4、R库导入功能" class="headerlink" title="4、R库导入功能"></a>4、R库导入功能</h3><p>R-base还提供导入功能。这些具有相似的名称那些在<strong>tidyverse</strong>，例如<code>read.table</code>，<code>read.csv</code>和<code>read.delim</code>。但是，有两个重要的区别。为了说明这一点，我们使用基于R的函数读入数据：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs R">dat2 &lt;- read.csv(filename)<br></code></pre></td></tr></table></figure><p>一个重要的区别是字符被转换为因子：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs R"><span class="hljs-built_in">class</span>(dat2$abb)<br><span class="hljs-comment">#&gt; [1] &quot;factor&quot;</span><br><span class="hljs-built_in">class</span>(dat2$region)<br><span class="hljs-comment">#&gt; [1] &quot;factor&quot;</span><br></code></pre></td></tr></table></figure><p>这可以通过设置参数来避免<code>stringsAsFactors</code>到<code>FALSE</code>。</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs R">dat &lt;- read.csv(<span class="hljs-string">&quot;murders.csv&quot;</span>, stringsAsFactors = <span class="hljs-literal">FALSE</span>)<br><span class="hljs-built_in">class</span>(dat$state)<br><span class="hljs-comment">#&gt; [1] &quot;character&quot;</span><br></code></pre></td></tr></table></figure><p>这可能会引起混乱，因为在文件中另存为字符的变量将转换为因子，而不管变量代表什么。实际上，可以设置<code>stringsAsFactors=FALSE</code>为使用R基解析器时的默认方法。导入数据后，可以轻松地将所需的列转换为因子。</p><h4 id="4-1、-scan"><a href="#4-1、-scan" class="headerlink" title="4.1、 scan"></a>4.1、 <code>scan</code></h4><p>在电子表格中阅读时，很多事情都会出错。该文件可能具有多行标头，缺少单元格，或者可能使用了意外的编码。</p><p>有关以下常见问题的帖子：<a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/">https</a> : <a href="https://www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about-unicode-and-character-sets-no-excuses/">//www.joelonsoftware.com/2003/10/08/the-absolute-minimum-every-software-developer-absolutely-positively-must-know-about- Unicode和字符集无借口/</a>。</p><p>使用扫描可以读入文件的每个单元格。比如：</p><figure class="highlight r"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs R">path &lt;- system.file(<span class="hljs-string">&quot;extdata&quot;</span>, package = <span class="hljs-string">&quot;dslabs&quot;</span>)<br>filename &lt;- <span class="hljs-string">&quot;murders.csv&quot;</span><br>x &lt;- scan(file.path(path, filename), sep=<span class="hljs-string">&quot;,&quot;</span>, what = <span class="hljs-string">&quot;c&quot;</span>)<br>x[<span class="hljs-number">1</span>:<span class="hljs-number">10</span>]<br><span class="hljs-comment">#&gt;  [1] &quot;state&quot;      &quot;abb&quot;        &quot;region&quot;     &quot;population&quot; &quot;total&quot;     </span><br><span class="hljs-comment">#&gt;  [6] &quot;Alabama&quot;    &quot;AL&quot;         &quot;South&quot;      &quot;4779736&quot;    &quot;135&quot;</span><br></code></pre></td></tr></table></figure><p>tidyverse提供<code>read_lines</code>了相似有用的功能。</p><h3 id="5、文本文件与二进制文件"><a href="#5、文本文件与二进制文件" class="headerlink" title="5、文本文件与二进制文件"></a>5、文本文件与二进制文件</h3><p>从存储为文本文件的电子表格中提取数据可能是将数据从文件导入R会话的最简单方法。但是电子表格并不总是可用，可以查看文本文件这一事实并不一定意味着从它们中提取数据将很简单。</p><h3 id="6、-Unicode与ASCII"><a href="#6、-Unicode与ASCII" class="headerlink" title="6、 Unicode与ASCII"></a>6、 Unicode与ASCII</h3><p>实际上，数据科学的一个缺陷是假设文件是ASCII文本文件，而实际上它是另一个看起来很像ASCII文本文件的东西：Unicode文本文件。</p><p>计算机上的所有内容最终都需要转换为0和1。ASCII是一种将字符映射到数字的<em>编码</em>。ASCII使用7位（0和1）来产生唯一项，足以对英语键盘上的所有字符进行编码。但是，其他语言使用的字符不包含在此编码中。例如，墨西哥的é并非由ASCII编码。因此，定义了一种使用7位以上的新编码：Unicode。使用Unicode时，可以在8位，16位和32位（分别缩写为UTF-8，UTF-16和UTF-32）之间进行选择。RStudio实际上默认为UTF-8编码。2 7 = 12827=128</p><p>关于StackOverflow的讨论：<a href="https://stackoverflow.com/questions/18789330/r-on-windows-character-encoding-hell">https</a> : <a href="https://stackoverflow.com/questions/18789330/r-on-windows-character-encoding-hell">//stackoverflow.com/questions/18789330/r-on-windows-character-encoding-hell</a>。</p><h4 id="7、使用电子表格组织数据"><a href="#7、使用电子表格组织数据" class="headerlink" title="7、使用电子表格组织数据"></a>7、使用电子表格组织数据</h4><p>需要注意：</p><ul><li><strong>保持一致</strong> -在开始输入数据之前，请制定一个计划。一旦有了计划，请保持一致并坚持下去。</li><li><strong>选择事物的好名称</strong> -您希望为对象，文件和目录选择的名称易于记忆，易于拼写和描述。这实际上是很难达到的平衡，并且确实需要时间和思想。要遵循的一个重要规则是<strong>不要使用空格</strong>，而应使用下划线<code>_</code>或破折号<code>-</code>。另外，避免使用符号；坚持字母和数字。</li><li>**将日期写为YYYY-MM-DD-**为避免混淆，使用此全局ISO 8601标准。</li><li><strong>没有空单元格</strong> -填写所有单元格，并使用一些通用代码处理丢失的数据。</li><li><strong>在单元格中放一件事</strong> -最好添加列以存储额外的信息，而不是在一个单元格中包含多个信息。</li><li><strong>设为矩形</strong> -电子表格应为矩形。</li><li><strong>创建数据字典</strong> -如果您需要解释事物，例如列是什么或用于分类变量的标签是什么，请在单独的文件中执行此操作。</li><li><strong>原始数据文件中无计算</strong> -Excel允许您执行计算。不要将此部分放在电子表格中。计算代码应在脚本中。</li><li><strong>不要将字体颜色或突出显示用作数据</strong> -大多数导入功能无法导入此信息。而是将此信息编码为变量。</li><li><strong>进行备份</strong> -定期备份数据。</li><li><strong>使用数据验证来避免错误</strong> -利用电子表格软件中的工具，以使该过程尽可能没有错误，并且不会造成重复应力伤害。</li><li><strong>将数据另存为文本文件</strong> -以逗号或制表符分隔格式保存文件以供共享。</li></ul>]]></content>
      
      
      <categories>
          
          <category> NOTE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer science </tag>
            
            <tag> data science </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
